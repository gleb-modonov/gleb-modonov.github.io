[1,["ecXd3XuVlK/Z3w/dV5K6SB","eejng2pYRCfZKJERid71jJ","b10JXIdzNHZpTXHMTMAiyN@f9941","0fCr5XhOdF1Lm5Hs4dFY89","baIUdvKGZPgZxNbjWTFuRI","f9b6oz1zJCl7FmsJwb/TLm","b5rMZLVlRG84umS6oD/0/C","e3rk/gI+NEBJmhZ39bBql4","48shXWe+5NpIDF32/I1kzW","95o+Mu/ddFfK+mVoNPkxW3","9dQ+BejDRH/6EiXptFZWKf","8dbJAGPJ1FLbk9kV0eefLF","4fLWBS8L1GdZyAavZsnnIQ@f9941","9cr0ExfuZJCIDZewdugPVg@6c48a","a7YStUNeNCOKGpSntUY1g5","b10JXIdzNHZpTXHMTMAiyN@6c48a","30bjS+ZodJg5r8kYfM/gzW","a5jIa8PURP1K12I2dNnMrh","f1JMYC8VhP14fysi7eL8nD","d42FOXl8dP3YGAtTb2h/tu","cczIbW0DtP7Z3VUUkvzOyJ@6c48a","77f9bm3IhGGooRV0ZfB46d","30glSBhBBAXozeI44EBbi/","69/FPL5ElN/ozqvPjurtxj","d1NGQ2rJZCcbhjH0/erZWw","a3zQCfCrBCDZJ4uf2rk5u8","18IVT2P6lE8rY2YFUfNDIF@6c48a","6fFOLu3clGEbMDOV177GPf","12Y9dMgWdJKJGmTiZyQR9H@a804a","03fbRQH+hIfrWHv1o37KPX","c0ht5atJtC7YXGBYEUN97/","98j6Lk+uVGC62CBw00StKT","b3F3oSutZLgZ6LyFyPX/bB","c3JrXSn5ZJ+4qwEE0s+v97","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","b4EmcrdO5K07oo2bsdf8Ek@aeaac","4fLWBS8L1GdZyAavZsnnIQ@6c48a","37NvGgZUdE/L2sysVEZ3+S@6c48a","cbx36HcgJE6plSHlFvp7dT@53dde","4ctoziWNJHEazSgqfGrRaP@6c48a","c9t/I10JlHKa4pgrw1xluz","99sP9O/pZDCI97Q9LH/zt4","91zTHw+fdCbIKHfEG1x1xo","23VpBDbTJIB51PbHNRKT6a@5fd65","23VpBDbTJIB51PbHNRKT6a@953bc","23VpBDbTJIB51PbHNRKT6a@788c3","18IVT2P6lE8rY2YFUfNDIF@f9941","c3Fq1KzexMVIKlr9Mh95n5@f9941","3afAPzdPdL/ZfZ4L7na7h6","88ghWF+S9ML6nlX/5bw091@2feb1","6cZAQWbElIbJ27fQOsEF8I@2e991","5avzDhBO5IUIfRMhSwqK5m","23VpBDbTJIB51PbHNRKT6a@e1cf9","23VpBDbTJIB51PbHNRKT6a@438fe","ad6KFa3MpLPITG9kdqyHW7","d2PxirSQtOQrFLOKpsvLCQ@f9941","82hnuCd1dJy6AV6BTq3VPp","6e8d7+eZdHeps1wYhZ/4Bm","c0PeLj/QlI+ayfZEN5lGH7","f7YHDNUlpBI5rCPcSeSHOH","4a0dAJAGhHEpLwEMc8KZZg","81euasNSNCX5KAT/ggGQNe","1dMJEuxFNA/Lwj/eYc009u","16MaGrys5MmJ/z12IGdGN0","f8MKXGJzRNTqvhR6aIcekW@2f6d1","c6W7WWrjJIQKhdBLdrTlKC@c6e33","c8+AlGijBMdqJI+DDfxHGo@73684","c3Fq1KzexMVIKlr9Mh95n5@6c48a","c8vUzntX5JKbZA2/YNBNxM@f9941","27aaWP2gpCZr8HyuGJ9CZH","eaIBEDoE9Bpaz25RdH+dQv","47W86+S+5JMKmwYjak/2aB","66ZNbosx9C+ab9uQ0BFU3B","c8vUzntX5JKbZA2/YNBNxM@6c48a","d2PxirSQtOQrFLOKpsvLCQ@6c48a","ab0qYKXB9Lu5LSxqgnSjP8@45f73","403qqSDj5IMp5Z5/Xs6neJ@fd4a2","7dJNPQJuJBXYcqwtd0IHJf@97b51"],["node","root","asset","data","_parent","_spriteFrame","targetInfo","_mesh","_defaultClip","_material","_effectAsset","_font","_textureSource","to","from","prefab","mainTexture","icon","collider","uiAnchor","label","target","source","clip","defaultMeshRenderer","damageAnimation","damageAudioClip","emissiveMap","destroyedMeshRenderer","_particleSystem","_cpuMaterial","_mainTexture","MRAIDButton","canvas","cameraMovement","camera","audioContainer","updateManager","scene","_cameraComponent","playerAvatarPrefab","referencesContainerPrefab","dataContainerPrefab","_envmapHDR","_envmapLDR","followersContainer","_anyState","_exitState","_entryState","directionHint","weaponContainer","animationEventListener","animator","damageableDetector","rigidbody","_skeleton","graph","_target","_normalSprite","resourceCounterPrefab","uiBarPrefab","uiDamageBlockedPrefab","resourcesPopup","upgradePopup","gameplayWindowPrefab","victoryWindowPrefab","flashMaterial","damageVFX","joystickStick","joystickBase","_barSprite"],[["cc.Node",["_name","_layer","_objFlags","__editorExtras__","_id","_prefab","_parent","_components","_lpos","_children","_lrot","_euler","_lscale"],-2,4,1,9,5,2,5,5,5],"cc.ImageAsset",["cc.Node",["_name","_id","_objFlags","_components","_parent","_prefab","_children","_lpos","_lrot","_euler","_lscale"],0,2,1,4,2,5,5,5,5],["cc.Node",["_name","_layer","_id","_objFlags","_components","_prefab","_parent","_children","_lpos"],-1,12,4,1,2,5],["cc.Sprite",["_sizeMode","_type","node","__prefab","_spriteFrame","_color"],1,1,4,6,5],"cc.SpriteFrame",["cc.UITransform",["_name","node","__prefab","_contentSize","_anchorPoint"],2,1,4,5,5],["cc.Widget",["_alignFlags","_top","_bottom","_right","_originalWidth","_originalHeight","_left","_alignMode","node","__prefab"],-5,1,4],["cc.Label",["_string","_actualFontSize","_fontSize","_isSystemFontUsed","_lineHeight","_enableWrapText","_fontFamily","_cacheMode","_overflow","node","__prefab","_font","_color"],-6,1,4,6,5],["cc.MeshRenderer",["_shadowCastingMode","_shadowReceivingMode","_name","node","__prefab","_materials","lightmapSettings","_mesh"],0,1,4,3,4,6],["cc.RealKeyframeValue",["interpolationMode","value","rightTangentWeight","leftTangentWeight","rightTangent","leftTangent"],-3],["cc.PrefabInfo",["fileId","root","asset","nestedPrefabInstanceRoots","targetOverrides"],2,1,1,2,9],["cc.CurveRange",["mode","constant","constantMax","spline"],0,4],["cc.Animation",["playOnLoad","node","__prefab","_clips","_defaultClip"],2,1,4,3,6],["e2d1aJCdTxP57qBRX5ymvrL",["resourceType","maxResources","level","node","__prefab","uiAnchor","collider","damageAnimation","defaultMeshRenderer","damageAudioClip","destroyedMeshRenderer"],0,1,4,1,1,1,1,6,1],"cc.TextureCube",["cc.Node",["_name","_children","_prefab","_lpos","_lrot","_euler","_parent"],2,9,4,5,5,5,1],["cc.BoxCollider",["_isTrigger","node","__prefab","_material"],2,1,4,6],["cc.PrefabInfo",["fileId","targetOverrides","root","instance","asset"],1,1,4,6],["cc.Material",["_name","_props","_states","_defines","_techIdx"],-2],["cc.LabelOutline",["_width","node","__prefab"],2,1,4],["cc.Button",["_transition","node","__prefab","_normalColor","_hoverColor","_pressedColor","_disabledColor","_target","_normalSprite"],2,1,4,5,5,5,5,1,6],["cc.Camera",["_far","_visibility","_fov","_projection","_priority","_orthoHeight","_clearFlags","node","_color"],-4,1,5],["cc.animation.UnaryCondition",["operator","operand"],2,4],["cc.animation.Motion",["name","speed","motion"],1,4],["cc.SphereCollider",["_isTrigger","_radius","node","__prefab","_material"],1,1,4,6],["cc.RigidBody",["_type","_mass","_linearDamping","_angularDamping","_useGravity","node","__prefab"],-2,1,4],["cc.ParticleSystem",["duration","loop","playOnAwake","_capacity","startRotation3D","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","bursts","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_noiseModule","_trailModule","renderer"],-2,1,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,4,4,4,4,4,4,4,4,4,4],["cc.GradientRange",["_mode","gradient"],2,4],["cc.AlphaKey",["alpha","time"],1],["cc.SizeOvertimeModule",["_enable","size","x","y","z"],2,4,4,4,4],["cc.CapsuleCollider",["_cylinderHeight","_direction","_radius","node","__prefab","_material"],0,1,4,6],["WeaponData",["damage","level","prefab"],1,6],["cc.Prefab",["_name"],2],["cc.Node",["_name","_children","_prefab","_lpos","_lrot","_euler"],2,12,4,5,5,5],["876e6QoVW1ELa1sw0UvmL9C",["node","__prefab"],3,1,4],["cc.CompPrefabInfo",["fileId"],2],["cc.PrefabInfo",["fileId","targetOverrides","root","asset","nestedPrefabInstanceRoots"],1,1,1,2],["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.Mesh",["_native","_hash","_struct"],1,11],["e1e728qfHFEo7dIjESQCfea",["node","__prefab","MRAIDButton"],3,1,4,1],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.TargetInfo",["localID"],2],["cc.ModelLightmapSettings",[],3],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],2,1,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["cc.AudioClip",["_name","_native","_duration"],0],["cc.SceneAsset",["_name"],2],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_enabled","_normal","_shadowColor"],2,5,5],["cc.SkyboxInfo",["_envmapHDR","_envmapLDR"],3,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["1b4ba5Jf89MPoJKh8May7Km",["node","updateManager","levelParent","audioContainer","camera","cameraMovement","canvas","playerAvatarPrefab","referencesContainerPrefab","dataContainerPrefab"],3,1,1,1,1,1,1,1,6,6,6],["14d90dfdVNHY6xjinoJurLF",["node"],3,1],["c511bRQ2rlIVoz0wEEQxMpw",["node","target"],3,1,1],["cc.Canvas",["node"],3,1],["cc.DirectionalLight",["_colorTemperature","node","_staticSettings"],2,1,4],["cc.StaticLightSettings",["_castShadow"],2],["cc.EffectAsset",["_name","shaders","techniques"],0],["4ce21atDDRGqLLfakjv9MYd",["node","__prefab","icon","label"],3,1,4,1,1],["cc.TargetOverrideInfo",["propertyPath","source","target","targetInfo"],2,1,1,4],["cc.Layout",["_resizeMode","_layoutType","_spacingY","_isAlign","node","__prefab"],-1,1,4],["c46e7QsmfVBTa9mj3/KWIMu",["node","__prefab","resourceContainer","tutorial"],3,1,4,1,1],["cc.animation.AnimationGraph",["_layers","_variables"],3,9,11],["cc.animation.Layer",["_stateMachine"],3,4],["cc.animation.StateMachine",["_states","_transitions","_entryState","_exitState","_anyState"],3,2,9,1,1,1],["cc.animation.AnimationTransition",["duration","exitConditionEnabled","from","to","conditions"],1,1,1,9],["cc.animation.BindableBoolean",["variable"],2],["cc.animation.Transition",["from","to"],3,1,1],["cc.animation.PlainVariable",["_type","_value"],1],["cc.animation.ClipMotion",["clip"],3,6],["cc.animation.State",["name"],2],["67819aRm3NBHa2yQbaezqAJ",["node","__prefab","rigidbody","collider","uiAnchor","damageableDetector","animator","animationEventListener","weaponContainer","directionHint"],3,1,4,1,1,1,1,1,1,1,1],["cc.SpriteRenderer",["node","__prefab","_materials","_spriteFrame"],3,1,4,3,6],["cc.SkinnedMeshRenderer",["_shadowCastingMode","node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],2,1,4,3,4,1,6,6],["cc.animation.AnimationController",["node","__prefab"],3,1,4],["c16d7m+AfNLJ4kiTfMQOTEK",["node","__prefab"],3,1,4],["36a38vcnqRP76FIDLXDhkNy",["node","__prefab"],3,1,4],["146ddQgz+RNCbShKTgQ0vvn",["node","__prefab"],3,1,4],["cc.CylinderCollider",["node","__prefab","_center"],3,1,4,5],["cc.Burst",["count"],3,4],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.Gradient",["colorKeys","alphaKeys"],3,9,9],["cc.ColorKey",["color"],3,5],["cc.ShapeModule",["_enable","_shapeType","randomDirectionAmount","radius","radiusThickness","arcSpeed"],-2,4],["cc.RealCurve",["_times","_values"],2,9],["cc.VelocityOvertimeModule",["x","y","z","speedModifier"],3,4,4,4,4],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.LimitVelocityOvertimeModule",["dampen","limitX","limitY","limitZ","limit"],2,4,4,4,4],["cc.RotationOvertimeModule",["x","y","z"],3,4,4,4],["cc.TextureAnimationModule",["frameOverTime","startFrame"],3,4,4],["cc.NoiseModule",[],3],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.ParticleSystemRenderer",["_cpuMaterial","_mainTexture"],3,6,6],["c72f2HwWA5KM5JgnsYMDbG7",["node","__prefab","uiReferences","prepoolingData","flashMaterial","damageVFX"],3,1,4,4,9,6,6],["UIReferences",["resourceCounterPrefab","uiBarPrefab","uiDamageBlockedPrefab","resourcesPopup","upgradePopup","gameplayWindowPrefab","victoryWindowPrefab"],3,6,6,6,6,6,6,6],["PrepoolingData",["amount","prefab"],2,6],["0581aTi/nBL8aloHeKK45+F",["downloadGameURL","maxAudioSources","node","__prefab","playerMovementData","resourceCollection","levelCollection","upgradeCollection","weaponCollection"],1,1,4,4,4,4,4,4],["PlayerMovementData",["movementSpeed","rotationSpeed"],1],["ResourceCollection",["resourceDataArray"],3,9],["ResourceData",["resourceType","icon"],2,6],["LevelCollection",["levels"],3,3],["UpgradeCollection",["upgradeDataArray"],3,9],["UpgradeData",["resourceType","resourceAmount"],1],["WeaponCollection",["weaponDataArray"],3,9],["d9211qu1Y1OboQaTNo6TnuY",["maxStickDistance","node","__prefab","joystickBase","joystickStick"],2,1,4,1,1],["cc.ProgressBar",["_totalLength","_progress","node","__prefab","_barSprite"],1,1,4,1],["cc.TTFFont",["_name","_native"],1]],[[46,0,1,2,2],[36,0,2],[42,0,2],[11,0,1,2,2],[48,0,1,2,2],[0,2,3,6,5,3],[44,0,1,2,2],[12,1],[18,0,2,3,4,2],[45,0,1,2,3],[6,1,2,3,1],[33,0,2],[47,0,1,2,3],[18,0,1,2,3,4,3],[12,1,2],[39,0,1,2,3],[43,1],[0,0,6,9,5,8,10,11,2],[12,0,3,2],[91,0,1,2],[0,0,1,6,7,5,3],[10,0,1,3],[3,0,1,6,4,5,8,3],[0,0,1,9,7,5,8,3],[0,0,6,5,8,2],[0,0,6,5,8,10,11,2],[13,0,1,2,3,4,2],[28,1],[10,0,1,2,3,5],[0,0,6,9,5,2],[38,0,1,2,3,4],[4,1,0,2,3,5,4,3],[20,1,2,1],[9,1,3,4,5,6,2],[72,0,1,2,3,4,3],[73,0,2],[0,0,7,5,8,2],[4,0,2,3,2],[29,0,1,3],[10,0,4,2,5,3,6],[0,0,1,6,9,7,5,3],[0,0,1,6,7,5,8,3],[3,0,7,4,5,8,2],[16,0,6,1,2,3,4,5,2],[37,0,1,2,3,4,3],[7,0,4,5,8,9,4],[13,1,2,3,1],[4,0,2,3,4,2],[65,0,1,2,3,1],[66,0,1,2,3,2],[23,1,1],[76,0,1],[77,0,2],[102,0,1,2],[0,0,1,9,7,5,3],[0,0,9,5,2],[0,0,9,5,8,10,11,2],[0,0,7,5,2],[2,0,4,3,5,2],[2,0,4,3,5,10,2],[6,0,1,2,3,2],[6,1,2,1],[6,1,2,3,4,1],[4,2,3,1],[8,0,1,2,4,5,3,9,10,11,7],[8,0,1,2,8,3,9,10,6],[9,0,3,4,5,6,7,2],[9,1,3,4,5,6,7,2],[49,0,1,2,4],[64,0,1,2,4],[23,0,1,2],[75,0,1,3],[24,0,2,2],[25,2,3,1],[28,0,1,2],[86,0,1],[87,0,1,2],[88,0,1,1],[89,0,1],[29,0,2],[90,0,1,2,3,4,5,6],[10,0,1,4,5,5],[10,0,2,3,4],[92,0,1,2,3,1],[93,0,1,2,1],[94,0,1,2,3,4,2],[95,0,1,2,1],[96,0,1,1],[97,1],[98,0,1,2,3,4,1],[99,0,1,1],[106,0,1,2],[109,0,1,3],[32,0,1,2,3],[0,0,7,5,8,12,2],[0,0,2,1,6,7,5,4],[0,0,2,9,5,3],[0,0,6,7,5,8,12,2],[0,0,6,9,10,11,2],[0,0,4,6,7,8,10,11,3],[0,0,1,6,7,5,8,10,11,3],[0,0,6,7,5,8,10,12,11,2],[0,0,6,9,5,12,2],[0,0,6,9,5,10,11,2],[0,0,6,5,2],[0,0,6,7,5,8,10,11,2],[0,0,2,1,9,7,5,4],[0,0,7,5,12,2],[3,0,1,6,7,4,5,8,3],[3,0,2,6,4,3],[3,0,1,2,6,7,4,8,4],[3,0,1,7,4,5,3],[3,0,3,7,4,5,3],[3,0,6,4,5,2],[2,0,1,4,6,3,7,3],[2,0,3,7,8,9,2],[2,0,4,3,7,2],[2,0,2,4,3,5,3],[2,0,6,3,5,2],[2,0,4,6,3,5,2],[2,0,6,3,5,7,8,9,2],[2,0,4,3,5,8,9,2],[16,0,1,2,3,4,5,2],[34,0,1,2,3,4,5,2],[35,0,1,1],[17,0,1,2,3,2],[17,1,2,3,1],[11,0,1,2,3,2],[11,0,2],[11,0,1,2,4,3,2],[19,0,4,1,2,3,6],[19,0,1,2,3,5],[6,1,1],[6,1,3,1],[7,0,1,2,8,9,4],[7,0,6,3,1,2,8,6],[7,0,3,1,8,9,4],[7,0,2,8,9,3],[7,0,3,1,2,7,8,9,6],[40,0,1,2,1],[13,1,2,3,4,1],[4,0,2,3,5,4,2],[4,1,0,2,3,4,3],[4,1,0,2,3,5,3],[8,0,1,2,3,9,10,12,11,5],[8,0,1,2,6,3,7,9,10,11,7],[8,0,1,2,4,5,3,9,10,7],[20,0,1,2,2],[21,0,1,2,3,4,5,6,7,2],[21,0,1,2,3,4,5,6,7,8,2],[41,0,1,2,3,4],[9,2,0,3,4,5,6,7,3],[9,3,4,5,6,7,1],[50,0,2],[51,0,1,2,3,2],[52,0,1,2,3,4,1],[53,0,1,2,3,4,2],[54,0,1,2,2],[55,0,1,1],[56,1],[57,1],[58,0,1,2,3,4,5,6,7,8,9,1],[59,0,1],[22,2,0,1,4],[22,3,4,5,0,6,1,7,8,7],[60,0,1,1],[61,0,1],[62,0,1,2,2],[63,0,2],[67,0,1,2,3,4,5,5],[68,0,1,2,3,1],[69,0,1,1],[70,0,1],[71,0,1,2,3,4,1],[74,0,1,1],[24,0,1,2,3],[14,0,1,2,3,4,5,6,7,8,10,9,4],[14,0,1,3,4,5,6,7,8,10,9,3],[14,0,1,2,3,4,5,6,7,8,9,4],[25,0,1,2,3,4,3],[78,0,1,2,3,4,5,6,7,8,9,1],[26,0,5,6,2],[26,1,2,3,4,5,6,5],[79,0,1,2,3,1],[80,0,1,2,3,4,5,6,7,2],[81,0,1,1],[82,0,1,1],[83,0,1,1],[84,0,1,1],[85,0,1,2,1],[27,0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,5],[27,4,0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,6],[12,0,2,3],[30,0,1,2,3,4,2],[30,1,2,3,4,1],[100,0,1,2,3,4,5,1],[101,0,1,2,3,4,5,6,1],[31,0,1,3,4,3],[31,2,0,1,3,4,5,4],[103,0,1,2,3,4,5,6,7,8,3],[104,0,1,3],[105,0,1],[107,0,1],[108,0,1],[110,0,1],[32,0,2,2],[111,0,1,2,3,4,2],[112,0,1,2,3,4,3],[113,0,1,3]],[[[[11,"TriggerZone"],[94,"TriggerZone",[[124,-2,[1,"e9Gb9acMhGJpSAGxq+U52s"]],[125,true,-3,[1,"c92SBTh3FPioJBMOy0wfSG"],0]],[3,"fdOngQHGRJ5Lt5xiJFpskq",-1,0],[1,0,1,-6.303],[1,5,2,2]]],0,[0,1,1,0,0,1,0,0,1,0,3,1,3],[0],[9],[4]],[[[30,"matProps",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{},"mainColor",8,[4,4293190884],"shadeColor1",8,[4,4291743438],"shadeColor2",8,[4,4290164406],"specular",8,[4,8421504],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[16,27,10],[13,13,14]],[[[15,".bin",3434579268,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[130,"matFlash","2",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true}]]],0,0,[0],[10],[25]],[[{"name":"sprInfinity","rect":{"x":0,"y":0,"width":128,"height":128},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-64,-64,0,64,-64,0,-64,64,0,64,64,0],"indexes":[0,1,2,2,1,3],"uv":[0,128,128,128,0,0,128,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-64,"y":-64,"z":0},"maxPos":{"x":64,"y":64,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[12],[26]],[[[11,"VictoryWindow"],[54,"VictoryWindow",33554432,[-7],[[10,-2,[1,"cd9x2XVzNMY5XIIf1m8OBy"],[5,1080,1920]],[45,45,100,100,-3,[1,"ddfaiIIRBEPoE5KAe75axJ"]],[139,-5,[1,"83X1f9DQNLT6sg/8BrtEVw"],-4],[140,-6,[1,"890V3Z5+JAvbW3r0Qw9Tfr"],[4],5]],[3,"6ckdvqXeBN24n5FnVnDAey",-1,0]],[108,"ButtonDownload",33554432,1,[-13],[[[10,-8,[1,"1cDehEQSZIGpz0tUFr+PIy"],[5,500,170]],[31,1,0,-9,[1,"b4GenzMC1BJIemZVp6Vyyi"],[4,4280451837],1],-10,[134,4,200,-300,-11,[1,"d6v8LIDcVIjLHruneV1xZQ"]],[26,true,-12,[1,"6df25ei0NEjpxfYw9OYmZ/"],[2],3]],4,4,1,4,4],[3,"8bBH2/cTlCerWkdCbW3Hsk",1,0],[1,0,-1175,0]],[95,"Label",512,33554432,2,[[10,-14,[1,"78+Q0YqHlJkKqPkyWo7MfA"],[5,376.05,130]],[64,"DOWNLOAD",70,70,100,false,false,-15,[1,"98mDERYopFKYGYV6MSdj5r"],0],[32,-16,[1,"fcvEGPIG5GWqhSRNl4jpEB"]]],[3,"aa7lXRulpOMLVIuLPthgEd",1,0]],[148,1,2,[1,"1b7hBlMWNJPIHiJ5GKDRIO"],[4,4280451837],[4,4280451837],[4,4280055271],[4,4280451837],2]],0,[0,1,1,0,0,1,0,0,1,0,32,4,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,-3,4,0,0,2,0,0,2,0,-1,3,0,0,3,0,0,3,0,0,3,0,3,1,16],[0,0,0,0,0,0],[11,5,-1,8,-1,8],[5,2,7,7,16,16]],[[[150,"Skin-0",302371628,["Armature.001/Hips","Armature.001/Hips/UpperLeg_L","Armature.001/Hips/UpperLeg_L/LowerLeg_L","Armature.001/Hips/UpperLeg_L/LowerLeg_L/Foot_L","Armature.001/Hips/UpperLeg_R","Armature.001/Hips/UpperLeg_R/LowerLeg_R","Armature.001/Hips/UpperLeg_R/LowerLeg_R/Foot_R","Armature.001/Hips/Spine","Armature.001/Hips/Spine/Chest","Armature.001/Hips/Spine/Chest/Neck","Armature.001/Hips/Spine/Chest/Neck/Head","Armature.001/Hips/Spine/Chest/Shoulder_L","Armature.001/Hips/Spine/Chest/Shoulder_L/UpperArm_L","Armature.001/Hips/Spine/Chest/Shoulder_L/UpperArm_L/LowerArm_L","Armature.001/Hips/Spine/Chest/Shoulder_L/UpperArm_L/LowerArm_L/Hand_L","Armature.001/Hips/Spine/Chest/Shoulder_L/UpperArm_L/LowerArm_L/Hand_L/Fingers_L","Armature.001/Hips/Spine/Chest/Shoulder_L/UpperArm_L/LowerArm_L/Hand_L/Thumb_L","Armature.001/Hips/Spine/Chest/Shoulder_L/UpperArm_L/LowerArm_L/Hand_L/Weapon_L","Armature.001/Hips/Spine/Chest/Shoulder_R","Armature.001/Hips/Spine/Chest/Shoulder_R/UpperArm_R","Armature.001/Hips/Spine/Chest/Shoulder_R/UpperArm_R/LowerArm_R","Armature.001/Hips/Spine/Chest/Shoulder_R/UpperArm_R/LowerArm_R/Hand_R","Armature.001/Hips/Spine/Chest/Shoulder_R/UpperArm_R/LowerArm_R/Hand_R/Fingers_R","Armature.001/Hips/Spine/Chest/Shoulder_R/UpperArm_R/LowerArm_R/Hand_R/Thumb_R","Armature.001/Hips/Spine/Chest/Shoulder_R/UpperArm_R/LowerArm_R/Hand_R/Weapon_R"],[[[7,0.9999867081642151,-0.0029861703515052795,0.004234512336552143,0,-0.004319438710808754,-0.02903187833726406,0.9995689392089844,0,-0.002861947054043412,-0.9995740652084351,-0.029044385999441147,0,0.0005859319353476167,0.8602216839790344,0.02864479459822178,1],[7,-0.9927573800086975,0.11634768545627594,-0.029934866353869438,0,7.559799541922985e-7,-0.24916687607765198,-0.9684605598449707,0,-0.12013685703277588,-0.9614464640617371,0.2473621666431427,0,0.17703428864479065,0.7143702507019043,-0.1643853336572647,1],[7,-0.9927576184272766,0.11929567158222198,0.014169625006616116,0,0.000019765526303672232,0.11811046302318573,-0.9930002093315125,0,-0.12013419717550278,-0.9858085513114929,-0.11725742369890213,0,0.17703436315059662,0.4199846684932709,-0.013331471011042595,1],[7,-1.0000001192092896,-1.51805579662323e-7,-8.484348654747009e-7,0,4.0564739833826025e-7,-0.9514251351356506,-0.3078797459602356,0,-7.604841130159912e-7,-0.3078797459602356,0.9514252543449402,0,0.1678479015827179,0.006435713265091181,-0.08892279863357544,1],[7,-0.9927575588226318,-0.11634847521781921,0.02992893010377884,0,0.000005210987637838116,-0.249166801571846,-0.9684603214263916,0,0.12013612687587738,-0.9614465236663818,0.24736273288726807,0,-0.17333891987800598,0.7148045301437378,-0.16449780762195587,1],[7,-0.9927576780319214,-0.11929500102996826,-0.01418656948953867,0,-0.0000027289702302368823,0.11811046302318573,-0.9930002093315125,0,0.12013547867536545,-0.9858089089393616,-0.11725533753633499,0,-0.17333854734897614,0.42043063044548035,-0.013280968181788921,1],[7,-1.0000001192092896,-1.7136336794010276e-7,-3.450550423167442e-7,0,2.6927483531835605e-7,-0.9514250755310059,-0.30788010358810425,0,-2.755344894467271e-7,-0.3078800439834595,0.951425313949585,0,-0.164124995470047,0.0064367507584393024,-0.08892589807510376,1],[7,-0.9999933838844299,0.002924388973042369,0.002195906825363636,0,0.0022381292656064034,0.014514253474771976,0.9998918771743774,0,0.002892199205234647,0.9998906850814819,-0.014520696364343166,0,-0.0006195625755935907,-0.8605471253395081,0.01614941470324993,1],[7,-0.9999282360076904,-0.01177827175706625,0.002217375673353672,0,0.0020713373087346554,0.012396658770740032,0.9999207258224487,0,-0.011804820969700813,0.9998539090156555,-0.012371367774903774,0,0.01344640739262104,-0.9569035172462463,0.01409229077398777,1],[7,-0.999997615814209,-8.637719872695016e-8,0.0022169966250658035,0,0.002216995693743229,-2.5291477356859104e-8,0.9999971985816956,0,-8.632085268800438e-8,1.0000001192092896,2.5482906451657072e-8,0,2.3191383036191837e-8,-1.1390681266784668,4.5876385001974995e-7,1],[7,-1,-1.9744038581848145e-7,-3.5855919122695923e-7,0,-3.585589922749932e-7,-5.077130822428444e-7,0.9999997615814209,0,-1.9744048529446445e-7,1.000000238418579,5.077129117125878e-7,0,9.851402893445993e-8,-1.226763367652893,-1.5627536242845963e-7,1],[7,-0.39478591084480286,0.9061712026596069,0.15165171027183533,0,-1.5140962261739332e-7,0.16505880653858185,-0.986283540725708,0,-0.9187734127044678,-0.38937070965766907,-0.06516271829605103,0,1.0559524297714233,0.39778849482536316,0.04047997668385506,1],[7,-0.5740755200386047,0.7870806455612183,0.22570331394672394,0,0.013688342645764351,0.2848372161388397,-0.9584780335426331,0,-0.8186882734298706,-0.5471491813659668,-0.17429181933403015,0,0.9657558798789978,0.5197731256484985,0.1529112607240677,1],[7,-0.5448901057243347,0.8120834827423096,-0.20884382724761963,0,0.013689002022147179,-0.24041758477687836,-0.9705728888511658,0,-0.8383961319923401,-0.5317142009735107,0.11988450586795807,0,0.9758369326591492,0.2779197096824646,0.0027763121761381626,1],[7,-0.6637842655181885,0.747171938419342,-0.03354935348033905,0,-5.793521040686755e-7,-0.04485710710287094,-0.9989933967590332,0,-0.7479246854782104,-0.6631157398223877,0.02977585606276989,0,0.9625561833381653,0.16080529987812042,-0.013751133345067501,1],[7,-0.6637830138206482,0.7471728920936584,-0.03354949131608009,0,-5.273866463539889e-7,-0.04485718533396721,-0.9989933967590332,0,-0.7479256391525269,-0.6631144285202026,0.029775815084576607,0,0.9625563025474548,0.008908153511583805,-0.01375100389122963,1],[7,-0.8059013485908508,0.24977196753025055,-0.5367845892906189,0,0.24307690560817719,-0.6871245503425598,-0.6846703290939331,0,-0.5398491024971008,-0.6822565197944641,0.49304071068763733,0,0.881862461566925,0.3555913269519806,-0.13551285862922668,1],[7,-0.9325849413871765,-0.04485743120312691,-0.35815319418907166,0,0.04904628172516823,-0.9987930059432983,-0.0026149284094572067,0,-0.35760340094566345,-0.020004717633128166,0.933659553527832,0,0.799787700176239,0.037148188799619675,-0.47171422839164734,1],[7,-0.3947862386703491,-0.9061710238456726,-0.15165145695209503,0,-1.134753517817444e-7,0.1650586724281311,-0.9862833619117737,0,0.9187731742858887,-0.38937103748321533,-0.06516297161579132,0,-1.054255485534668,0.40167292952537537,0.04113040119409561,1],[7,-0.5740759372711182,-0.7870787382125854,-0.22570882737636566,0,-0.013677739538252354,0.28483694791793823,-0.9584781527519226,0,0.8186880350112915,-0.5471519827842712,-0.17428342998027802,0,-0.9632886648178101,0.523147702217102,0.15386813879013062,1],[7,-0.5448904633522034,-0.8120841979980469,0.20883791148662567,0,-0.013678346760571003,-0.24041743576526642,-0.9705727100372314,0,0.8383954167366028,-0.5317124724388123,0.11989320814609528,0,-0.9734976887702942,0.2813993990421295,0.0018715369515120983,1],[7,-0.6637847423553467,-0.7471712231636047,0.033549871295690536,0,-2.2125686882645823e-7,-0.04485714063048363,-0.9989931583404541,0,0.747923731803894,-0.6631165742874146,0.029775308445096016,0,-0.9597070813179016,0.16400954127311707,-0.013893204741179943,1],[7,-0.663783609867096,-0.7471719980239868,0.03354989364743233,0,-3.133993331516649e-8,-0.044857293367385864,-0.9989930391311646,0,0.7479243874549866,-0.6631155610084534,0.029775507748126984,0,-0.9597072005271912,0.012111217714846134,-0.013893299736082554,1],[7,-0.8059023022651672,-0.2497727870941162,0.5367822051048279,0,-0.24307692050933838,-0.6871213912963867,-0.6846733689308167,0,0.5398470759391785,-0.6822593212127686,0.4930386245250702,0,-0.8784035444259644,0.3566623330116272,-0.13781169056892395,1],[7,-0.9325854182243347,0.04485675320029259,0.3581508696079254,0,-0.049045562744140625,-0.9987927675247192,-0.0026150622870773077,0,0.3576010763645172,-0.020004477351903915,0.9336602091789246,0,-0.7997838258743286,0.037148553878068924,-0.47171324491500854,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[15,".bin",184721282,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":176184,"length":34104,"count":8526,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":176184,"count":2447,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23]]},"minPosition",8,[1,-0.6787188053131104,-0.29184380173683167,-1.8530736056732167e-8],"maxPosition",8,[1,0.6787184476852417,0.4161021113395691,1.6706870794296265]]],-1],0,0,[],[],[]],[[[11,"Level"],[96,"Level",512,[-50,-51,-52,-53,-54],[127,"7bMlNUoTRPd4FNtTVg8bIl",-49,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48]]],[55,"Trees",[-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75],[3,"0aHGMuIMBLKofCVuKZ6u9h",1,0]],[55,"Fences",[-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88],[3,"a0oGBoxYZMy5RvcaoT6qRB",1,0]],[29,"Breakables",1,[-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100],[3,"dfCEu/o0pB45uIHhYY3LhW",1,0]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[2,["fdOngQHGRJ5Lt5xiJFpskq"]],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["52TLzwtftFra5m/XwSaA+s"]],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[97,"Ground",1,[[151,"Cube<ModelComponent>",1,-101,[1,"42NEyVhN5IPoia4Et8w/jo"],[0],[16],1],[126,-102,[1,"1a/weqcaFLO7qb1N2/CtAa"],2]],[3,"b9RvbnR7JLC4gZJnBPt3cA",1,0],[1,0,-0.5,-8],[1,60,1,60]],[5,0,{},1,[8,"fdOngQHGRJ5Lt5xiJFpskq",-103,[6,"76QDcn5XhOBb20KR5eU7U/",1,[[9,"TriggerZone",["_name"],21],[0,["_lpos"],21,[1,0,1,-9]],[0,["_lrot"],21,[3,0,0,0,1]],[0,["_euler"],21,[1,0,0,0]]]],3]],[5,0,{},1,[13,"b3Hw2slq5MorIQvUEvY3gh",[],-104,[6,"e4vVWHrZlN6qb79hDeV0EH",1,[[9,"Gates",["_name"],22],[0,["_lpos"],22,[1,0,0,-6]],[0,["_lrot"],22,[3,0,0,0,1]],[0,["_euler"],22,[1,0,0,0]]]],4]],[29,"Props",1,[2,3],[3,"d8G7PvuDBO6b9AKvieh973",1,0]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-105,[6,"e7tUZ1iStBYKhic2fJzDpW",1,[[9,"Tree",["_name"],23],[0,["_lpos"],23,[1,-6.254,0,-1.11]],[0,["_lrot"],23,[3,0,0,0,1]],[0,["_euler"],23,[1,0,0,0]]]],5]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-106,[6,"b5+w4C5j9EK4Mgtzg+S5rF",1,[[9,"Tree-001",["_name"],24],[0,["_lpos"],24,[1,-2.866,0,-7.436]],[0,["_lrot"],24,[3,0,0,0,1]],[0,["_euler"],24,[1,0,0,0]]]],6]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-107,[6,"abvFL3dlBEpLPC3LSPimI4",1,[[9,"Tree-002",["_name"],5],[0,["_lpos"],5,[1,-6.063,0,-4.205]],[0,["_lrot"],5,[3,0,0,0,1]],[0,["_euler"],5,[1,0,0,0]],[0,["_lscale"],5,[1,0.75,0.75,0.75]]]],7]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-108,[6,"09ZXIYtm5IMqvbYvHNlwnu",1,[[9,"Tree-003",["_name"],6],[0,["_lpos"],6,[1,-6.131,0,-7.427]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[0,["_lscale"],6,[1,1.25,1.25,1.25]]]],8]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-109,[6,"51PAhrM+9FqYWm4BC/1Qi9",1,[[9,"Tree-004",["_name"],7],[0,["_lpos"],7,[1,-6.441,0,2.023]],[0,["_lrot"],7,[3,0,0,0,1]],[0,["_euler"],7,[1,0,0,0]],[0,["_lscale"],7,[1,1.25,1.25,1.25]]]],9]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-110,[6,"7eR1V158VK9o+gYi4ZLJJb",1,[[9,"Tree-005",["_name"],25],[0,["_lpos"],25,[1,-3.74,0,8.141]],[0,["_lrot"],25,[3,0,0,0,1]],[0,["_euler"],25,[1,0,0,0]]]],10]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-111,[6,"35KZ1HgNhLOaNrhly+aDBS",1,[[9,"Tree-006",["_name"],8],[0,["_lpos"],8,[1,-5.999,0,5.043]],[0,["_lrot"],8,[3,0,0,0,1]],[0,["_euler"],8,[1,0,0,0]],[0,["_lscale"],8,[1,0.75,0.75,0.75]]]],11]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-112,[6,"abyE/xLbFLpoBCwS7LOFJ8",1,[[9,"Tree-007",["_name"],9],[0,["_lpos"],9,[1,-1.169,0,8.086]],[0,["_lrot"],9,[3,0,0,0,1]],[0,["_euler"],9,[1,0,0,0]],[0,["_lscale"],9,[1,0.75,0.75,0.75]]]],12]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-113,[6,"55Q5Fst1dL0IEAajb9MkdR",1,[[9,"Tree-008",["_name"],26],[0,["_lpos"],26,[1,1.398,0,8.537]],[0,["_lrot"],26,[3,0,0,0,1]],[0,["_euler"],26,[1,0,0,0]]]],13]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-114,[6,"646vPmBddKMotd0/eypf1T",1,[[9,"Tree-009",["_name"],10],[0,["_lpos"],10,[1,3.945,0,8.528]],[0,["_lrot"],10,[3,0,0,0,1]],[0,["_euler"],10,[1,0,0,0]],[0,["_lscale"],10,[1,0.75,0.75,0.75]]]],14]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-115,[6,"97/0ehJGtLrrPoUDEqNU7i",1,[[9,"Tree-010",["_name"],27],[0,["_lpos"],27,[1,6.705,0,8.351]],[0,["_lrot"],27,[3,0,0,0,1]],[0,["_euler"],27,[1,0,0,0]]]],15]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-116,[6,"3385a416BAHZ3/GW0Qhnes",1,[[9,"Tree-011",["_name"],11],[0,["_lpos"],11,[1,6.411,0,4.958]],[0,["_lrot"],11,[3,0,0,0,1]],[0,["_euler"],11,[1,0,0,0]],[0,["_lscale"],11,[1,0.75,0.75,0.75]]]],16]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-117,[6,"b4ZngKNXlNUJ4jXX7CEj2Y",1,[[9,"Tree-012",["_name"],12],[0,["_lpos"],12,[1,7.217,0,2.24]],[0,["_lrot"],12,[3,0,0,0,1]],[0,["_euler"],12,[1,0,0,0]],[0,["_lscale"],12,[1,1.25,1.25,1.25]]]],17]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-118,[6,"1egabDdexKjaCmf4ijQUnJ",1,[[9,"Tree-013",["_name"],28],[0,["_lpos"],28,[1,6.692,0,-2.009]],[0,["_lrot"],28,[3,0,0,0,1]],[0,["_euler"],28,[1,0,0,0]]]],18]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-119,[6,"5dP2L1++5Og6U/h3g8hSzM",1,[[9,"Tree-014",["_name"],13],[0,["_lpos"],13,[1,6.261,0,-4.901]],[0,["_lrot"],13,[3,0,0,0,1]],[0,["_euler"],13,[1,0,0,0]],[0,["_lscale"],13,[1,0.75,0.75,0.75]]]],19]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-120,[6,"bbvwzyFlFIgLPoLaDArPTm",1,[[9,"Tree-015",["_name"],14],[0,["_lpos"],14,[1,2.846,0,-7.659]],[0,["_lrot"],14,[3,0,0,0,1]],[0,["_euler"],14,[1,0,0,0]],[0,["_lscale"],14,[1,1.25,1.25,1.25]]]],20]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-121,[6,"307xGmdNBFva0NoZFBgJtb",1,[[9,"Tree-016",["_name"],29],[0,["_lpos"],29,[1,6.202,0,-7.652]],[0,["_lrot"],29,[3,0,0,0,1]],[0,["_euler"],29,[1,0,0,0]]]],21]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-122,[6,"b0sg9QpetE84epTs3GYs7K",1,[[9,"Tree-017",["_name"],15],[0,["_lpos"],15,[1,-2.795,0,-10.31]],[0,["_lrot"],15,[3,0,0,0,1]],[0,["_euler"],15,[1,0,0,0]],[0,["_lscale"],15,[1,0.75,0.75,0.75]]]],22]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-123,[6,"d7ZzrY90FC3aZ4GTIdTkMt",1,[[9,"Tree-018",["_name"],30],[0,["_lpos"],30,[1,3.326,0,-11.247]],[0,["_lrot"],30,[3,0,0,0,1]],[0,["_euler"],30,[1,0,0,0]]]],23]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-124,[6,"27hu8CFO1Kzrgwup1RKicX",1,[[9,"Tree-019",["_name"],31],[0,["_lpos"],31,[1,-3.639,0,-13.001]],[0,["_lrot"],31,[3,0,0,0,1]],[0,["_euler"],31,[1,0,0,0]]]],24]],[5,0,{},2,[8,"52TLzwtftFra5m/XwSaA+s",-125,[6,"a34MqqqVlHE6iKt8nlJp2B",1,[[9,"Tree-020",["_name"],16],[0,["_lpos"],16,[1,3.471,0,-14.611]],[0,["_lrot"],16,[3,0,0,0,1]],[0,["_euler"],16,[1,0,0,0]],[0,["_lscale"],16,[1,0.75,0.75,0.75]]]],25]],[5,0,{},3,[8,"07I5sRgfNKGZPaRDVbkh6q",-126,[6,"14hT4UFZJMtpq4FYDI3npd",1,[[9,"Fence",["_name"],17],[0,["_lpos"],17,[1,-3.1,0,-6.039]],[0,["_lrot"],17,[3,0,0,0,1]],[0,["_euler"],17,[1,0,0,0]],[0,["_lscale"],17,[1,1,1,1]]]],26]],[5,0,{},3,[8,"07I5sRgfNKGZPaRDVbkh6q",-127,[6,"e653HhHy5K0bqI3ubk8rYj",1,[[12,"Fence-002",["_name"],[2,["07I5sRgfNKGZPaRDVbkh6q"]]],[4,["_lpos"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,-4.632,0,-4.548]],[4,["_lrot"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[3,0,0.7050675305642728,0,0.709140167628374]],[4,["_euler"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,0,89.67,0]],[4,["_lscale"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,1,1,1]]]],27]],[5,0,{},3,[8,"07I5sRgfNKGZPaRDVbkh6q",-128,[6,"f2zqdK/Y9K0blHGIrcgNGS",1,[[12,"Fence-003",["_name"],[2,["07I5sRgfNKGZPaRDVbkh6q"]]],[4,["_lpos"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,-4.65,0,-1.505]],[4,["_lrot"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[3,0,0.7050675305642728,0,0.709140167628374]],[4,["_euler"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,0,89.67,0]],[4,["_lscale"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,1,1,1]]]],28]],[5,0,{},3,[8,"07I5sRgfNKGZPaRDVbkh6q",-129,[6,"966CboQ59MVZnsOF1T1+4l",1,[[12,"Fence-004",["_name"],[2,["07I5sRgfNKGZPaRDVbkh6q"]]],[4,["_lpos"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,-4.668,0,1.601]],[4,["_lrot"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[3,0,0.7050675305642728,0,0.709140167628374]],[4,["_euler"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,0,89.67,0]],[4,["_lscale"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,1,1,1]]]],29]],[5,0,{},3,[8,"07I5sRgfNKGZPaRDVbkh6q",-130,[6,"55EuThJx1NirLDIsvCOhrZ",1,[[12,"Fence-005",["_name"],[2,["07I5sRgfNKGZPaRDVbkh6q"]]],[4,["_lpos"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,-4.685,0,4.58]],[4,["_lrot"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[3,0,0.7050675305642728,0,0.709140167628374]],[4,["_euler"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,0,89.67,0]],[4,["_lscale"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,1,1,1]]]],30]],[5,0,{},3,[8,"07I5sRgfNKGZPaRDVbkh6q",-131,[6,"17hfc0fjJPdK+YQBkWmY6m",1,[[9,"Fence-001",["_name"],18],[0,["_lpos"],18,[1,-3.1,0,6.093]],[0,["_lrot"],18,[3,0,0,0,1]],[0,["_euler"],18,[1,0,0,0]],[0,["_lscale"],18,[1,1,1,1]]]],31]],[5,0,{},3,[8,"07I5sRgfNKGZPaRDVbkh6q",-132,[6,"97ITr3VstDpq71W7XwIIUR",1,[[9,"Fence-006",["_name"],19],[0,["_lpos"],19,[1,0,0,6.093]],[0,["_lrot"],19,[3,0,0,0,1]],[0,["_euler"],19,[1,0,0,0]],[0,["_lscale"],19,[1,1,1,1]]]],32]],[5,0,{},3,[8,"07I5sRgfNKGZPaRDVbkh6q",-133,[6,"67DEu7PItGhrkzAn9nzFM5",1,[[12,"Fence-008",["_name"],[2,["07I5sRgfNKGZPaRDVbkh6q"]]],[4,["_lpos"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,3.1,0,6.093]],[4,["_lrot"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[3,0,0,0,1]],[4,["_euler"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,0,0,0]],[4,["_lscale"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,1,1,1]]]],33]],[5,0,{},3,[8,"07I5sRgfNKGZPaRDVbkh6q",-134,[6,"ea0ZaPrm9FOoE5hohIqlPY",1,[[12,"Fence-007",["_name"],[2,["07I5sRgfNKGZPaRDVbkh6q"]]],[4,["_lpos"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,4.653,0,4.634]],[4,["_lrot"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[3,0,0.7050675305642728,0,0.709140167628374]],[4,["_euler"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,0,89.67,0]],[4,["_lscale"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,1,1,1]]]],34]],[5,0,{},3,[8,"07I5sRgfNKGZPaRDVbkh6q",-135,[6,"8euZpXaGZJf4crySnTriUj",1,[[12,"Fence-009",["_name"],[2,["07I5sRgfNKGZPaRDVbkh6q"]]],[4,["_lpos"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,4.67,0,1.655]],[4,["_lrot"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[3,0,0.7050675305642728,0,0.709140167628374]],[4,["_euler"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,0,89.67,0]],[4,["_lscale"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,1,1,1]]]],35]],[5,0,{},3,[8,"07I5sRgfNKGZPaRDVbkh6q",-136,[6,"b5cKAuXsxFioeBDzOlGdNl",1,[[12,"Fence-010",["_name"],[2,["07I5sRgfNKGZPaRDVbkh6q"]]],[4,["_lpos"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,4.688,0,-1.451]],[4,["_lrot"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[3,0,0.7050675305642728,0,0.709140167628374]],[4,["_euler"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,0,89.67,0]],[4,["_lscale"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,1,1,1]]]],36]],[5,0,{},3,[8,"07I5sRgfNKGZPaRDVbkh6q",-137,[6,"21+ZDZzHJKj6dJkRtOfbDU",1,[[12,"Fence-011",["_name"],[2,["07I5sRgfNKGZPaRDVbkh6q"]]],[4,["_lpos"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,4.706,0,-4.494]],[4,["_lrot"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[3,0,0.7050675305642728,0,0.709140167628374]],[4,["_euler"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,0,89.67,0]],[4,["_lscale"],[2,["07I5sRgfNKGZPaRDVbkh6q"]],[1,1,1,1]]]],37]],[5,0,{},3,[8,"07I5sRgfNKGZPaRDVbkh6q",-138,[6,"ffcCtqWxRFKIYASNZgNjqO",1,[[9,"Fence-012",["_name"],20],[0,["_lpos"],20,[1,3.1,0,-6.039]],[0,["_lrot"],20,[3,0,0,0,1]],[0,["_euler"],20,[1,0,0,0]],[0,["_lscale"],20,[1,1,1,1]]]],38]],[5,0,{},4,[13,"b3Hw2slq5MorIQvUEvY3gh",[],-139,[6,"64M8ANlVxFOpyr68zdkNDa",1,[[12,"Crate",["_name"],[2,["b3Hw2slq5MorIQvUEvY3gh"]]],[4,["_lpos"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,-3.618,0,-1.447]],[4,["_lrot"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[3,0,0.35665647324155225,0,0.9342356020270786]],[4,["_euler"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,0,41.79,0]]]],39]],[5,0,{},4,[13,"b3Hw2slq5MorIQvUEvY3gh",[],-140,[6,"beU5bznZJIoYCiYdg4z6Fh",1,[[12,"Crate-001",["_name"],[2,["b3Hw2slq5MorIQvUEvY3gh"]]],[4,["_lpos"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,-3.265,0,-3.245]],[4,["_lrot"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[3,0,0.2433949485373526,0,0.9699272648124185]],[4,["_euler"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,0,28.174,0]],[4,["_lscale"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,1.15,1.15,1.15]]]],40]],[5,0,{},4,[13,"b3Hw2slq5MorIQvUEvY3gh",[],-141,[6,"60YoPYRk1DCZQr+zxjw6D7",1,[[12,"Crate-002",["_name"],[2,["b3Hw2slq5MorIQvUEvY3gh"]]],[4,["_lpos"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,-2.034,0,-2.548]],[4,["_lrot"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[3,0,-0.127480081214376,0,0.9918411308740811]],[4,["_euler"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,0,-14.648,0]],[4,["_lscale"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,0.9,0.9,0.9]]]],41]],[5,0,{},4,[13,"b3Hw2slq5MorIQvUEvY3gh",[],-142,[6,"48ot800l1G9I/focNGRhKB",1,[[9,"Barell",["_name"],32],[0,["_lpos"],32,[1,2.123,0,1.244]],[0,["_lrot"],32,[3,0,0,0,1]],[0,["_euler"],32,[1,0,0,0]]]],42]],[5,0,{},4,[13,"b3Hw2slq5MorIQvUEvY3gh",[],-146,[6,"2e2pr+TzRCLYU93RuFtNcl",1,[[9,"Barell-001",["_name"],33],[0,["_lpos"],33,[1,2.314,0,-0.576]],[0,["_lrot"],33,[3,0,0,0,1]],[0,["_euler"],33,[1,0,0,0]],[0,["_lrot"],-143,[3,0,-0.9997708904140811,0,-0.021404828442093356]],[0,["_euler"],-144,[1,0,-182.453,0]],[0,["_lpos"],-145,[1,0.158,0,0.331]]]],43]],[2,["0dwoyOTiNEYq42X1idoFpe"]],[5,0,{},4,[13,"b3Hw2slq5MorIQvUEvY3gh",[],-147,[6,"ccnQfJ3dJHQZK/rUJYtd6D",1,[[12,"Crate-003",["_name"],[2,["b3Hw2slq5MorIQvUEvY3gh"]]],[4,["_lpos"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,2.38,0,-4.954]],[4,["_lrot"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[3,0,0.35665647324155225,0,0.9342356020270786]],[4,["_euler"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,0,41.79,0]]]],44]],[5,0,{},4,[13,"b3Hw2slq5MorIQvUEvY3gh",[],-148,[6,"1bTFILM5NHdZBpHaPVye64",1,[[12,"Barell-002",["_name"],[2,["b3Hw2slq5MorIQvUEvY3gh"]]],[4,["_lpos"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,2.916,0.525,0.745]],[4,["_lrot"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[3,0.7017644318095703,0.6350800950506337,0.08675645363309348,0.31092325881232846]],[4,["_euler"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,90,56.867,70.962]]]],45]],[5,0,{},4,[13,"b3Hw2slq5MorIQvUEvY3gh",[],-149,[6,"e8qLZzQt5Jb7dwZMQbGaXi",1,[[12,"Crate-004",["_name"],[2,["b3Hw2slq5MorIQvUEvY3gh"]]],[4,["_lpos"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,3.588,0,-4.017]],[4,["_lrot"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[3,0,-0.127480081214376,0,0.9918411308740811]],[4,["_euler"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,0,-14.648,0]],[4,["_lscale"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,0.9,0.9,0.9]]]],46]],[5,0,{},4,[13,"b3Hw2slq5MorIQvUEvY3gh",[],-150,[6,"c9rqcEOaRMlIesmwTO0UJI",1,[[12,"Crate-005",["_name"],[2,["b3Hw2slq5MorIQvUEvY3gh"]]],[4,["_lpos"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,0.033,0,4.106]],[4,["_lrot"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[3,0,-0.1928302392026802,0,0.9812321330088193]],[4,["_euler"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,0,-22.236,0]],[4,["_lscale"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,1.15,1.15,1.15]]]],47]],[5,0,{},4,[13,"b3Hw2slq5MorIQvUEvY3gh",[],-151,[6,"8e/CKIja1OM6EBURmAZG3Q",1,[[12,"Crate-006",["_name"],[2,["b3Hw2slq5MorIQvUEvY3gh"]]],[4,["_lpos"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,1.562,0,4.614]],[4,["_lrot"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[3,0,0.8543545387534539,0,0.5196906022927228]],[4,["_euler"],[2,["b3Hw2slq5MorIQvUEvY3gh"]],[1,0,117.377,0]]]],48]],[5,0,{},4,[13,"b3Hw2slq5MorIQvUEvY3gh",[],-152,[6,"ee9yGgBMlL8IIqpnBMG5kJ",1,[[9,"Barell-003",["_name"],34],[0,["_lpos"],34,[1,-3.774,0,2.364]],[0,["_lrot"],34,[3,0,0.3664768683237325,0,0.9304271626428527]],[0,["_euler"],34,[1,0,42.997,0]]]],49]],[5,0,{},4,[13,"b3Hw2slq5MorIQvUEvY3gh",[],-153,[6,"a6Fd8CgQdFR4sVIb5bgdT8",1,[[9,"Barell-004",["_name"],35],[0,["_lpos"],35,[1,-3.031,0.533,3.268]],[0,["_lrot"],35,[3,0.562499649643455,0.07004546133592016,0.42847887246746513,0.7036289031486969]],[0,["_euler"],35,[1,90,-31.613,42.983]]]],50]]],0,[0,-1,86,0,-2,85,0,-3,84,0,-4,83,0,-5,82,0,-6,81,0,-7,80,0,-8,78,0,-9,77,0,-10,76,0,-11,75,0,-12,74,0,-13,73,0,-14,72,0,-15,71,0,-16,70,0,-17,69,0,-18,68,0,-19,67,0,-20,66,0,-21,65,0,-22,64,0,-23,63,0,-24,62,0,-25,61,0,-26,60,0,-27,59,0,-28,58,0,-29,57,0,-30,56,0,-31,55,0,-32,54,0,-33,53,0,-34,52,0,-35,51,0,-36,50,0,-37,49,0,-38,48,0,-39,47,0,-40,46,0,-41,45,0,-42,44,0,-43,43,0,-44,42,0,-45,41,0,-46,40,0,-47,38,0,-48,37,0,1,1,0,-1,36,0,-2,37,0,-3,38,0,-4,39,0,-5,4,0,-1,40,0,-2,41,0,-3,42,0,-4,43,0,-5,44,0,-6,45,0,-7,46,0,-8,47,0,-9,48,0,-10,49,0,-11,50,0,-12,51,0,-13,52,0,-14,53,0,-15,54,0,-16,55,0,-17,56,0,-18,57,0,-19,58,0,-20,59,0,-21,60,0,-1,61,0,-2,62,0,-3,63,0,-4,64,0,-5,65,0,-6,66,0,-7,67,0,-8,68,0,-9,69,0,-10,70,0,-11,71,0,-12,72,0,-13,73,0,-1,74,0,-2,75,0,-3,76,0,-4,77,0,-5,78,0,-6,80,0,-7,81,0,-8,82,0,-9,83,0,-10,84,0,-11,85,0,-12,86,0,0,36,0,0,36,0,1,37,0,1,38,0,1,40,0,1,41,0,1,42,0,1,43,0,1,44,0,1,45,0,1,46,0,1,47,0,1,48,0,1,49,0,1,50,0,1,51,0,1,52,0,1,53,0,1,54,0,1,55,0,1,56,0,1,57,0,1,58,0,1,59,0,1,60,0,1,61,0,1,62,0,1,63,0,1,64,0,1,65,0,1,66,0,1,67,0,1,68,0,1,69,0,1,70,0,1,71,0,1,72,0,1,73,0,1,74,0,1,75,0,1,76,0,1,77,0,6,79,0,6,79,0,6,79,0,1,78,0,1,80,0,1,81,0,1,82,0,1,83,0,1,84,0,1,85,0,1,86,0,3,1,2,4,39,3,4,39,153],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,7,9,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[27,28,4,29,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,9,9,6,9,6,6,6,9,9]],[[[11,"UIUpgradePopup"],[23,"UIUpgradePopup",33554432,[-4],[[60,"pageView-horizontal<UITransform>",-2,[1,"a2g7GgXWpGQrFxXIvFxSyE"],[5,140,60]],[26,true,-3,[1,"47UBnOcFxLIr7QxGv/H9sX"],[1],2]],[3,"02tDnoJhNEjJY4xSJFVC2U",-1,0],[1,-3.624,22.798,0]],[40,"Container",33554432,1,[-7],[[10,-5,[1,"cfnTL5S3RIqYbu3PHTMuF9"],[5,500,60]],[63,-6,[1,"4br/eg8UlHlbYPnFVtYbUr"]]],[3,"e0TQ/qYqdDnJMlLyFOf/LR",1,0]],[20,"Label",33554432,2,[[10,-8,[1,"eeqQiP2aFBkYGC5zzlcWJr"],[5,408.64,54.4]],[144,"WEAPON UPGRADED",45,45,false,-9,[1,"d7xwr6VyFFcLIKqYYvFTmX"],[4,4278245119],0],[32,-10,[1,"a8ai8SqMtGa6fKud5fngI5"]]],[3,"9dytb/UdZOgadVv1+pL2Fs",1,0]]],0,[0,1,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,-1,3,0,0,3,0,0,3,0,0,3,0,3,1,10],[0,0,0],[11,-1,8],[5,11,11]],[[[68,"hitMetal",".wav",1.846145],-1],0,0,[],[],[]],[[[15,".bin",1743507792,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16704,"length":2088,"count":522,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16704,"count":348,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.1783602237701416,-5.461593488576e-8,-1.1783604621887207],"maxPosition",8,[1,1.1783602237701416,3.6880393028259277,1.1783599853515625]]],-1],0,0,[],[],[]],[[[153,"main"],[154,"main",[-1,-2,-3,-4],[128,"41d92fdd-8022-4e12-b077-2f7391fa0590"],[155,[156,0.5208,[2,0.2,0.5,0.8,0.520833125],[2,1,1,1,1],[2,0.36244,0.486029,0.632565,0.5208],[2,0.437391,0.436011,0.436589,0]],[157,true,[1,0,-1,0],[4,503316480]],[158,3,4],[159],[160]]],[109,"GameRoot","51iZXX8mVI8Kyd5nrlT4PL",1,[[[161,-10,-9,1,-8,-7,-6,-5,0,1,2],-11,[132,-12]],4,1,4]],[110,"Canvas",33554432,"3ePWWBCZRKpbUX4boquEc0",1,[-16],[[[133,-13,[5,1080,1920]],-14,[135,45,5.684341886080802e-14,5.684341886080802e-14,1.1368683772161603e-13,1.1368683772161603e-13,-15]],4,1,4],[1,540,960.0000000000001,0]],[114,"CameraRoot","84k8+SwgpPG6AoESIhxQKj",1,[-18],[-17],[1,0,0,3.169]],[162,2],[163,30,100,1073741824],[115,"Main Camera",[6],[1,1,22,12],[3,-0.45399049973954675,0,0,0.8910065241883679],[1,-54,0,0]],[98,"Angle",4,[7],[3,0,0.17364817766693033,0,0.984807753012208],[1,0,20,0]],[165,4,2],[166,3],[116,"Camera",3,[-19],[1,0,0,1000]],[164,0,1073741824,960,2000,6,33554432,11,[4,4278190080]],[99,"Main Light","c0y6F5f+pAvI805TdmxIjx",1,[[167,7089,-20,[168,true]]],[1,5,20,13],[3,-0.37824232047908507,0.5087685126991366,0.2648481240693882,0.7265967373044222],[1,-55,70,0]]],0,[0,-1,2,0,-2,13,0,-3,3,0,-4,4,0,33,10,0,34,9,0,35,6,0,36,2,0,37,5,0,0,2,0,-2,5,0,0,2,0,0,3,0,-2,10,0,0,3,0,-1,11,0,-1,9,0,-1,8,0,-1,12,0,0,13,0,38,1,6,0,7,7,4,8,10,39,12,20],[0,0,0,0,0],[40,41,42,43,44],[31,32,33,34,35]],[[[11,"Weapon_2"],[36,"Weapon_2",[[66,1,-2,[1,"64qedNFOFM44voqMSDf+0O"],[0],[16],1]],[3,"d6/fHiO+VLkLLLg2Si0J65",-1,0],[1,-2.0807743072509766,0.5963954329490662,0]]],0,[0,1,1,0,0,1,0,3,1,2],[0,0],[-1,7],[3,36]],[[[11,"UIDamageBlocked"],[23,"UIDamageBlocked",33554432,[-3,-4],[[10,-2,[1,"9fl2oYTUlDrKwAzNN2qKU5"],[5,300,80]]],[3,"dc3i6dOaFDYZWfcv0056BX",-1,0],[1,-100,100,0]],[20,"Label",33554432,1,[[10,-5,[1,"74tpRrJ4JNiapcdcPScoy1"],[5,247.24,42]],[145,"Need an upgrade",30,30,"",false,2,-6,[1,"9eHkjFpiZF551CYFlzC6GW"],1],[147,1,-7,[1,"51XnDUQ4pHT65KGAoYOkQA"]]],[3,"075ZcqVCJIq7RDp1dpPq6J",1,0]],[20,"Sprite",33554432,1,[[10,-8,[1,"abHBT+ITBH55GdjrFsAjB9"],[5,300,80]],[31,1,0,-9,[1,"712KGEn35EvKsmLPiLZuQv"],[4,1677721600],0]],[3,"490+2MJctDHYWRwSMIMxlx",1,0]]],0,[0,1,1,0,0,1,0,-1,3,0,-2,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,3,1,9],[0,0],[5,11],[2,5]],[[{"name":"iconResourceWood","rect":{"x":0,"y":0,"width":128,"height":128},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-64,-64,0,64,-64,0,-64,64,0,64,64,0],"indexes":[0,1,2,2,1,3],"uv":[0,128,128,128,0,0,128,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-64,"y":-64,"z":0},"maxPos":{"x":64,"y":64,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[12],[37]],[[[30,"matCharacter",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{},"mainColor",8,[4,4292532954],"shadeColor1",8,[4,4290493371],"shadeColor2",8,[4,4287795858],"specular",8,[4,16777215],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[16,10],[38,14]],[[[11,"Weapon_3"],[36,"Weapon_3",[[152,-2,[1,"8f/7aP46BPxLp095HAjrLK"],[0],[16],1]],[3,"75EpkasftNnKWIqOiNHVVS",-1,0],[1,-1.1691991090774536,0.5963954329490662,0]]],0,[0,1,1,0,0,1,0,3,1,2],[0,0],[-1,7],[3,39]],[[[68,"hitWood",".wav",0.923084],-1],0,0,[],[],[]],[[[15,".bin",829480506,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":18720,"length":2472,"count":618,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":18720,"count":390,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5436615943908691,-8.910797077987809e-8,-0.546940803527832],"maxPosition",8,[1,0.5442277789115906,0.38807061314582825,0.5349889397621155]]],-1],0,0,[],[],[]],[[[69,"builtin-sprite-renderer",[{"hash":2322960945,"name":"builtin-sprite-renderer|spriteRender-vs:vert|spriteRender-fs:frag","blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\nuniform highp mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  uv0 = vec2(a_texCoord.x, 1.0 - a_texCoord.y);\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvarying vec2 uv0;\nuniform sampler2D cc_spriteTexture;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture2D(cc_spriteTexture, uv0);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":54,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":0}},"defines":[]}],[{"name":"default","passes":[{"program":"builtin-sprite-renderer|spriteRender-vs:vert|spriteRender-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":true,"depthWrite":false}}]}]]],0,0,[],[],[]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@7d38f"}]}],[15],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[30,"matGround",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{},"tilingOffset",8,[2,30,30,0,0],"mainColor",8,[4,4293190884],"specular",8,[4,16777215],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[16,27,10],[40,13,14]],[[[11,"UIResourcePopup"],[23,"UIResourcePopup",33554432,[-7],[[60,"pageView-horizontal<UITransform>",-2,[1,"a2g7GgXWpGQrFxXIvFxSyE"],[5,140,60]],[48,-5,[1,"afY12LGh9A1pm3fVB5r1h7"],-4,-3],[26,true,-6,[1,"47UBnOcFxLIr7QxGv/H9sX"],[0],1]],[3,"02tDnoJhNEjJY4xSJFVC2U",-1,0],[1,-3.624,22.798,0]],[40,"Container",33554432,1,[-10,-11],[[10,-8,[1,"cfnTL5S3RIqYbu3PHTMuF9"],[5,140,60]],[63,-9,[1,"4br/eg8UlHlbYPnFVtYbUr"]]],[3,"e0TQ/qYqdDnJMlLyFOf/LR",1,0]],[22,"Amount",33554432,2,[[[10,-12,[1,"eeqQiP2aFBkYGC5zzlcWJr"],[5,100,50.4]],-13,[32,-14,[1,"b9ngRA7h1P2oaDfrxFOYJY"]]],4,1,4],[3,"9dytb/UdZOgadVv1+pL2Fs",1,0],[1,-48.801,0,0]],[22,"Icon",33554432,2,[[[10,-15,[1,"efghtg5uZNiLtlg85E7co/"],[5,80,80]],-16],4,1],[3,"d1jFAL4XlNnJx6HWcDypMo",1,0],[1,47.27,0,0]],[65,"+67",59,73.1,2,false,3,[1,"d7xwr6VyFFcLIKqYYvFTmX"]],[37,0,4,[1,"d1IMoYbSJCwLiiaEA+7V5c"]]],0,[0,1,1,0,0,1,0,20,5,0,17,6,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,-1,3,0,-2,4,0,0,3,0,-2,5,0,0,3,0,0,4,0,-2,6,0,3,1,16],[0,0,5,6],[-1,8,11,5],[11,11,5,12]],[[[15,".bin",550483226,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10176,"length":1296,"count":324,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10176,"count":212,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.5749999284744263,-0.14556097984313965,-0.07500026375055313],"maxPosition",8,[1,1.5749999284744263,1.5,0.07500001788139343]]],-1],0,0,[],[],[]],[[[11,"GameplayWindow"],[111,"GameplayWindow",33554432,[-14,-15,-16,-17,-18],[[[10,-11,[1,"018XltUWVPz7ry2xC+8Ly/"],[5,1080,1920]],[45,45,100,100,-12,[1,"fbma+pQARNnrNO6aZVdt7n"]],-13],4,4,1],[129,"0eVv6oQTZENJXVWVN16F7X",-10,0,[[49,["uiJoystick"],-5,-4,[2,["52sCTIpHdEnItzvkUv33rW"]]],[49,["upgradeButton"],-7,-6,[2,["af6p4Wv0JENpxpPceaQAD+"]]],[49,["upgradeButtonCounter"],-9,-8,[2,["22alHRa3BD74T73JXjahKo"]]]],[-1,-2,-3]]],[41,"ResourceContainer",33554432,1,[[10,-19,[1,"4eDATsHM1NHL705qzl9fwh"],[5,100,-20]],[169,1,2,20,true,-20,[1,"89j/UPQGpGwL2CJOmYjwjC"]],[136,33,90,240,-21,[1,"e8ebrdzlxPAKMMGyrqdkT2"]]],[3,"caGSmDdLVFt5JoBAXgPrZo",1,0],[1,400,730,0]],[5,0,{},1,[8,"8cew6FPllIu5BR8PyWK1dE",-26,[6,"14Xx6LArtBpbzmvnW9PrYN",1,[[9,"UIUpgradeButton",["_name"],-22],[0,["_lpos"],-23,[1,0,-497.5,0]],[0,["_lrot"],-24,[3,0,0,0,1]],[0,["_euler"],-25,[1,0,0,0]]]],1]],[5,512,{},1,[8,"baBsOrVJBE8rqyw8gXLANA",-31,[6,"13GnueMbBJJaon42RsppnJ",1,[[9,"UIJoystick",["_name"],-27],[0,["_lpos"],-28,[1,0,0,0]],[0,["_lrot"],-29,[3,0,0,0,1]],[0,["_euler"],-30,[1,0,0,0]]]],0]],[2,["baBsOrVJBE8rqyw8gXLANA"]],[2,["8cew6FPllIu5BR8PyWK1dE"]],[5,0,{},1,[8,"d8k6Faxb9L6ZTAF22vHOqq",-36,[6,"7eic9lw/RL55DyzRr7uyqA",1,[[9,"UITutorial",["_name"],-32],[0,["_lpos"],-33,[1,0,-332,0]],[0,["_lrot"],-34,[3,0,0,0,1]],[0,["_euler"],-35,[1,0,0,0]]]],2]],[2,["d8k6Faxb9L6ZTAF22vHOqq"]],[170,1,[1,"77R83fRCNPzKI5sIPs1xGQ"],2,7],[20,"FollowContainers",33554432,1,[[10,-37,[1,"c9bVb87E5JzZh/TJrMdpXk"],[5,1080,1920]]],[3,"d9eI9cThRDNaCGLdAbJKrb",1,0]]],0,[0,-1,7,0,-2,3,0,-3,4,0,21,4,0,22,9,0,21,3,0,22,9,0,21,3,0,22,9,0,1,1,0,0,1,0,0,1,0,-3,9,0,-1,10,0,-2,4,0,-3,2,0,-4,3,0,-5,7,0,0,2,0,0,2,0,0,2,0,6,6,0,6,6,0,6,6,0,6,6,0,1,3,0,6,5,0,6,5,0,6,5,0,6,5,0,1,4,0,6,8,0,6,8,0,6,8,0,6,8,0,1,7,0,0,10,0,3,1,9,45,10,37],[0,0,0],[2,2,2],[41,42,43]],[[[171,[[172,[173,[-16,-17,-18,-19,-20,-21],[[34,0.15,false,-5,-4,[[50,[35,"move_b"]]]],[34,0.15,false,-7,-6,[[70,1,[35,"move_b"]]]],[174,-9,-8],[34,0.15,false,-11,-10,[[50,[35,"attack_b"]]]],[34,0.15,false,-13,-12,[[70,1,[35,"attack_b"]]]],[34,0.15,false,-15,-14,[[50,[35,"move_b"]]]]],-3,-2,-1]]],[{},"move_b",4,[71,1,false],"attack_b",4,[71,1,false]]],[72,"Armature.001|Armature.001|IDLE",[51,0]],[175,"Armature.001|Armature.001|AXE",3,[51,1]],[72,"Armature.001|Armature.001|RUN",[51,2]],[52,"Entry"],[52,"Exit"],[52,"Any"]],0,[0,46,6,0,47,5,0,48,4,0,13,3,0,14,1,0,13,1,0,14,3,0,13,1,0,14,4,0,13,2,0,14,1,0,13,1,0,14,2,0,13,3,0,14,2,0,-1,4,0,-2,5,0,-3,6,0,-4,1,0,-5,2,0,-6,3,21],[0,0,0],[23,23,23],[44,45,46]],[[[15,".bin",3145587751,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43104,"length":5892,"count":1473,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":43104,"count":898,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5447677969932556,-8.910797077987809e-8,-0.5480533242225647],"maxPosition",8,[1,0.545333981513977,1.4198201894760132,0.5360769033432007]]],-1],0,0,[],[],[]],[[[11,"UITutorial"],[23,"UITutorial",33554432,[-5,-6],[[10,-2,[1,"74wf+UcSBGq4SzuENR1c9/"],[5,350,350]],[137,4,453,-3,[1,"b1aEQS5wZOeLU3h1ydFCih"]],[26,true,-4,[1,"8bkwow92hCi7lDvLd9gCJw"],[2],3]],[3,"d8k6Faxb9L6ZTAF22vHOqq",-1,0],[1,0,-332,0]],[20,"Infinity",33554432,1,[[10,-7,[1,"e2j1AQOzdIUJv21Yr48SEe"],[5,350,350]],[47,0,-8,[1,"16BOAi2bBErbii16jMHWr3"],0]],[3,"0bi588emZIQqoyM0s7zuxE",1,0]],[40,"Hand",33554432,1,[-10],[[10,-9,[1,"6eq6PtoxJFjLZRtZQp7KGY"],[5,0,0]]],[3,"6bQ4KOhPJN7rDQNe84ko2Z",1,0]],[100,"Hand",33554432,3,[[10,-11,[1,"4aB+iGkNVFUZVF4i0TJ4ZI"],[5,160,160]],[47,0,-12,[1,"dcBN5H1BBPJqXC/UkEcNpo"],1]],[3,"01Ar+R5/pAhJ+tQQdZpUQ8",1,0],[1,45.613,-34.778,0],[3,0,0,0.25881904510252074,0.9659258262890683],[1,0,0,30]]],0,[0,1,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,3,0,-1,4,0,0,4,0,0,4,0,3,1,12],[0,0,0,0],[5,5,-1,8],[47,48,17,17]],[[[11,"Barell"],[42,"Barell",[-11,-12,-13],[[[176,30,54,2,-8,[1,"a1uS1aeBxJoLtFSDj+0dZT"],-7,-6,-5,-4,-3,3],-9,-10],4,1,1],[44,"b3Hw2slq5MorIQvUEvY3gh",[],-2,0,[-1]],[1,1.219,0,-3.629]],[2,["a8dafJ58NM+bteIzQWvL9I"]],[29,"Visual",1,[-14,-15],[3,"a6U1I8SjBPmpMgH5n8yDFF",1,0]],[5,0,{},1,[8,"a8dafJ58NM+bteIzQWvL9I",-16,[6,"7bv1cVx+9L65Dv4eUjq27A",1,[[9,"VFXDamageSplash",["_name"],2],[0,["_lpos"],2,[1,0,0.6,0]],[0,["_lrot"],2,[3,0.7071067811865475,0,0,0.7071067811865476]],[0,["_euler"],2,[1,89.99999999999999,0,0]]]],2]],[58,"IB_Barrel",3,[-17],[3,"0dwoyOTiNEYq42X1idoFpe",1,0]],[33,0,5,[1,"01z6Mu/VtBHqexTlC2kar0"],[0],[16]],[117,"IB_Barrel_Destroyed",512,3,[-18],[3,"5djL39QGlIR6f4pHJFVia4",1,0]],[33,0,7,[1,"d3XsHoDntAGqaR7EHcKS+E"],[1],[16]],[24,"UIAnchor",1,[3,"ac2XF5Y1ZPV75f4kqFZLd4",1,0],[1,0,1.25,0]],[73,1,[1,"701h3qCzZEirBG4TGZ5adI"]],[46,1,[1,"24FSjyxyNJQJq9UWcqKbLW"],[4]]],0,[0,-1,4,0,1,1,0,28,8,0,24,6,0,25,11,0,18,10,0,19,9,0,0,1,0,-2,10,0,-3,11,0,-1,3,0,-2,9,0,-3,4,0,-1,5,0,-2,7,0,1,4,0,-1,6,0,-1,8,0,3,1,18],[0,0,0,0,0,6,8,10,11],[-1,-1,2,26,-1,7,7,9,8],[3,3,10,49,8,50,51,4,8]],[[[11,"PlayerAvatar"],[112,"PlayerAvatar",512,[-13,-14,-15,-16],[[[180,-10,[1,"16tshngSpJyovBHgSraySN"],-9,-8,-7,-6,-5,-4,-3,-2],-11,-12],4,1,1],[3,"0eQFu8YOFB948NZYFQ73aQ",-1,0]],[118,"IdBr_character",[-19,-20],[-17,-18],[3,"65ORWL2LZAnaPGKYprBxpk",1,0]],[56,"Hips",[-21,-22,-23],[3,"d11sN2yT1MbLJqsH4NyTFG",1,0],[1,0.0018615282606333494,0.8606889247894287,0.003656065324321389],[3,0.9998912079759231,-0.0014623706030896895,0.0021388318565528633,0.014520987671566543],[1,178.335599102465,-0.2475005557140063,-0.1639983413302794]],[56,"Chest",[-24,-25,-26],[3,"ed5gXKXh5L16RuS+k4/QZh",1,0],[1,1.8510036170482635e-8,0.09641826152801514,-1.0952135198749602e-8],[3,-0.10061005590120002,0.00591310770718079,-0.04848471698454739,0.9937262621203733],[1,-11.556832207073702,0.11490594684514237,-5.5981582978644795]],[122,"Hand_L",[[24,"Fingers_L",-27,[3,"5cTv658ZBA3aITMZp7I7B1",1,0],[1,2.1094456315040588e-7,0.1518961638212204,-1.0244548320770264e-8]],[25,"Thumb_L",-28,[3,"f80j2riCtNO4b7ewFpcEnw",1,0],[1,0.010561147704720497,0.05305097997188568,0.053957633674144745],[3,0.3715441130738456,0.06016408123728005,-0.16439324191647864,0.9117620947271464],[1,46.14986557718112,13.87480766356216,-14.777604599503297]],[25,"Weapon_L",-29,[3,"cd9coskXZF/JXVMrDq9NX+",1,0],[1,0.03462902829051018,0.11106488108634949,-0.008157039992511272],[3,0.6744468922701122,-0.15461950266658256,-0.18123296210955311,0.6988338946754968],[1,88.41376767240202,1.8321604422316629,-27.507761036884972]]],[3,"8amfjZDs9Iz6EwR2Q+RDtq",1,0],[1,2.60770320892334e-8,0.2606986165046692,2.9802322387695312e-8],[3,0.09509484384297534,0.6334956827364413,0.19965344487730424,0.7414706282634502],[1,-7.07281355388922,82.56477540660701,24.617512180121388]],[123,"Hand_R",[[[24,"Fingers_R",-30,[3,"f88/sR80FCz6IUt8jmk36N",1,0],[1,4.256144165992737e-7,0.15189652144908905,-1.3597309589385986e-7]],[25,"Thumb_R",-31,[3,"75/R71/LRHtoGQH+KHBjAg",1,0],[1,-0.010561244562268257,0.053052179515361786,0.05395745486021042],[3,0.3715421160174165,-0.060163827868824675,0.16439355470772704,0.911762868849148],[1,46.14961978265719,-13.87476409815664,14.777678875441183]],-32],4,4,1],[3,"c5iH+lZQdIbJIftiw7SyiD",1,0],[1,1.1175870895385742e-8,0.2606985569000244,5.960464477539063e-8],[3,0.14670175412814823,-0.6171284955606242,-0.2398604319763077,0.7349135925229195],[1,-5.456725976196798,-81.62102986691704,-32.25044261199153]],[113,"DamageableDetector",1,[[-33,[179,true,1.2,-34,[1,"0dq50WqDVHAY7lHJM7SZnn"],3],[181,4,-35,[1,"41lCv7eEpAfYqn9ARG68j/"]]],1,4,4],[3,"97z2u782VK+bFjilOMnQ3b",1,0]],[119,"ArrowRoot-001",1,[-37],[-36],[3,"c5f9gTtUFJd54KwCBD5onr",1,0]],[101,"SpriteRenderer",8,[[183,-38,[1,"5di7XrpmVAbrbeDxTOjlhG"],[4],5],[26,true,-39,[1,"32OacztRdG0bpe41F1N89d"],[6],7]],[3,"e4FtXFkbFEia+25IT92zGD",1,0],[1,0,0.05,1.5],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.8,0.8,0.8],[1,-90,0,0]],[102,"Visual",1,[2],[3,"caCHJP+pxJfYmIoiLuJXnh",1,0],[1,1.25,1.25,1.25]],[17,"Armature.001",2,[3],[3,"ee9FqINlNG65R04owkra2E",1,0],[1,-0.09190981090068817,-0.1348872184753418,-0.16788414120674133],[3,0.09889855168588729,0.0016510077872776288,-0.061191692532390665,0.9932129315573481],[1,11.42691662079838,0.8879734020511372,-6.962875113527073]],[17,"UpperLeg_L",3,[-40],[3,"0f3bfx9jRNhYiADT8+NMIv",1,0],[1,0.08607660979032516,0.11097308993339539,0.026057394221425056],[3,0.08173417263040389,0.8583342990223772,-0.5064737177843365,0.008131994829076453],[1,61.45862329028701,174.39858921915823,7.589411327564372]],[43,"LowerLeg_L",12,[[25,"Foot_L",-41,[3,"45biGdHPRJLrnHGSmxgw3F",1,0],[1,3.725290298461914e-8,0.3521420359611511,-5.075708031654358e-8],[3,0.6339278207466532,-0.032466884632464145,-0.0506658925514113,0.7710475905011507],[1,78.90059803272487,0.8177490725364742,-6.851413991127268]]],[3,"d46ACmzXNHvo2NTkUExgji",1,0],[1,-3.725290298461914e-9,0.32766294479370117,7.543712854385376e-8],[3,0.9576433475652014,0.015633039461620323,-0.04519944347931371,-0.2839574567615134],[1,-147.09228738457966,4.462814505766531,3.187931120962211]],[17,"UpperLeg_R",3,[-42],[3,"e4/9P0ZG5IL6QC32HazL3d",1,0],[1,-0.08563096821308136,0.11148452758789062,0.025330496951937675],[3,0.09243009288581369,0.9059007812030426,-0.40424406743414254,-0.08594874338312039],[1,47.52105329067814,-175.21783434103975,13.706804468435763]],[43,"LowerLeg_R",14,[[25,"Foot_R",-43,[3,"226PWcaFtBXYam9g4+sE0S",1,0],[1,1.0384246706962585e-7,0.35214072465896606,1.3131648302078247e-7],[3,0.6339272793230648,0.032460659417293196,0.05067130499999732,0.7710479420696542],[1,78.900581187947,-0.8186947220437495,6.851440208720488]]],[3,"26AoSfl/dFqYDagocH1bLy",1,0],[1,-4.880130290985107e-7,0.32766249775886536,-7.264316082000732e-8],[3,-0.6388598303477735,0.010884554498536812,0.004877394232478435,0.7692306901488547],[1,-79.41625842858812,1.3166514469505717,-0.366909016053007]],[103,"Spine",3,[4],[3,"5eCXbPuYJMKZVvxM+Z9Cb8",1,0],[3,0.0014711537823247712,-0.056969295127504316,0.9973690920326828,0.044802113534142776],[1,173.4410164151099,-179.53753600321997,5.117635141317526]],[43,"Neck",4,[[25,"Head",-44,[3,"2adpBPrW9BMZ2dy7js1mQj",1,0],[1,3.457535058259964e-8,0.08769384026527405,2.8405338525772095e-8],[3,-2.2928002892790733e-7,0.0011086915413984157,-4.004686641279255e-8,0.999999385401317],[1,-0.0000262684519988101,0.12704671823449265,-0.000004618159305205542]]],[3,"57cRLsfvNA7pi43+RS6xaT",1,0],[1,9.778887033462524e-9,0.18199801445007324,-2.7474015951156616e-8],[3,0.027347658083623504,-0.002885896972186499,0.008168805466496742,0.9995884392154892],[1,3.1371999037987415,-0.35621170502557076,0.926687448037191]],[17,"Shoulder_L",4,[-45],[3,"6bnPVjYBBAGZ4XfmPgc0kt",1,0],[1,-0.0501871295273304,0.16972626745700836,-0.025479087606072426],[3,0.8450511991609649,-0.5312890818869234,-0.007320500186130792,0.05972263006089138],[1,167.7296717634091,-6.692849170152329,-64.0017389398196]],[17,"UpperArm_L",18,[-46],[3,"e8uj59XqtAqIWGGCbLuRlH",1,0],[1,-1.210719347000122e-7,0.06679677963256836,-1.862645149230957e-8],[3,0.06317499154635255,0.1542327671445305,-0.23047473569412816,0.9586983728935714],[1,12.244020816377668,21.001476153256725,-24.987732286245357]],[17,"LowerArm_L",19,[5],[3,"822SNJDo5PaKUeBbekEc/0",1,0],[1,3.128661774098873e-9,0.24877841770648956,6.146728992462158e-8],[3,0.6829260616981798,-0.18330977935731332,0.01088658259262681,0.707029703311566],[1,86.04823731012672,-16.378151576707015,-13.590430692104052]],[17,"Shoulder_R",4,[-47],[3,"d3KIzX82lDo6Kf9fZxVL2I",1,0],[1,0.046060960739851,0.17085590958595276,-0.025692349299788475],[3,0.8392134877569866,0.5407016259729382,0.00474879144077926,0.05779206361453842],[1,167.3291494564008,7.480855138487289,65.24095621409654]],[17,"UpperArm_R",21,[-48],[3,"16Abf09Y5Gq5An5DHFf5/7",1,0],[1,-0.000002205371856689453,0.06679784506559372,2.1280720829963684e-7],[3,0.3332795710513377,0.031388628396585926,0.10419325254585503,0.9365272273944485],[1,39.246363983526976,-0.6254674067379756,12.479014366750672]],[17,"LowerArm_R",22,[6],[3,"58kMUpChtMFoL07NcpEOJi",1,0],[1,0.0000022351741790771484,0.24877598881721497,-0.0000016763806343078613],[3,0.6845470534304626,0.1837430709776501,-0.010901999448690067,0.705347405124166],[1,86.30907901366244,16.386329651231012,13.661317394811189]],[17,"Weapon_R",6,[-49],[3,"b6SMzVGpxFF5gEg3L502W/",1,0],[1,-0.03178323432803154,0.11426850408315659,-0.008301004767417908],[3,-0.0038009489985372596,-0.015528603832818202,0.23772183107682407,0.9712017021603678],[1,0,-1.83205538397537,27.507824421391433]],[104,"WeaponContainer",24,[3,"70SxmfCLZB6ppKRWUnMmXm",1,0]],[105,"Char.002",2,[[184,1,-50,[1,"f49xd9znhFHZCbRXn6H1v8"],[0],[16],2,1,2]],[3,"d897QieDtDZodoxLSTExoN",1,0],[1,-0.09190987795591354,-0.13488717377185822,-0.16788415610790253],[3,-0.632375728907059,0.04443651892812356,-0.0421016410361369,0.7722394609814244],[1,-78.57307848591903,0.8879740354187269,-6.9628781819290175]],[185,2,[1,"abhO8Pl7FPzqYaJNr8B7bj"]],[186,2,[1,"dat02Ox5hBOqxP6tJklVPo"]],[187,7,[1,"3cPwddT6ZMGq79kPpruGG3"]],[188,8,[1,"17Rkr+gKVDwp+SlSG+5BND"]],[24,"UIAnchor",1,[3,"21mEjYEsFId63ynEEAdkJQ",1,0],[1,0,2.223,0]],[182,10,0,1,false,1,[1,"feREAsyP1McqH/g8HMqETG"]],[189,1,[1,"509ARaaVpKrrEpowGYCBh+"],[1,0,1,0]]],0,[0,1,1,0,49,30,0,50,25,0,51,28,0,52,27,0,53,29,0,19,31,0,18,33,0,54,32,0,0,1,0,-2,32,0,-3,33,0,-1,10,0,-2,7,0,-3,8,0,-4,31,0,-1,27,0,-2,28,0,-1,11,0,-2,26,0,-1,12,0,-2,14,0,-3,16,0,-1,17,0,-2,18,0,-3,21,0,4,5,0,4,5,0,4,5,0,4,6,0,4,6,0,-3,24,0,-1,29,0,0,7,0,0,7,0,-1,30,0,-1,9,0,0,9,0,0,9,0,-1,13,0,4,13,0,-1,15,0,4,15,0,4,17,0,-1,19,0,-1,20,0,-1,22,0,-1,23,0,-1,25,0,0,26,0,3,1,2,4,10,3,4,11,4,4,16,5,4,20,6,4,23,50],[0,0,0,0,0,0,0,0,27,33],[-1,7,55,9,-1,5,-1,8,56,9],[52,53,54,4,55,56,7,7,57,4]],[[[11,"UIUpgradeButton"],[23,"UIUpgradeButton",33554432,[-11,-12,-13],[[10,-2,[1,"cd9u/LMWdOj4XtIIM4aNjb"],[5,450,150]],[31,1,0,-3,[1,"7cK8IEoZpG+ZO4beyyzdMw"],[4,4280451837],1],[149,1,-5,[1,"af6p4Wv0JENpxpPceaQAD+"],[4,4280451837],[4,4280451837],[4,4280055271],[4,4279458484],-4,2],[138,4,40,370,387.5,1,-6,[1,"107fUL+qZB+7Ld8psxSgHX"]],[48,-9,[1,"22alHRa3BD74T73JXjahKo"],-8,-7],[26,true,-10,[1,"770WEvIAdJQLPddRwcnpHS"],[3],4]],[3,"8cew6FPllIu5BR8PyWK1dE",-1,0],[1,0,-497.5,0]],[41,"Label",33554432,1,[[10,-14,[1,"02Y9prPrdER4gH2wKjp3ew"],[5,204.25,130]],[64,"UPGRADE:",45,45,100,false,false,-15,[1,"54NHWuNQZA5YkjErd5pP9D"],0],[32,-16,[1,"3cpbgp/a1EOLxT9oCbhMo7"]]],[3,"a60qmQjHRKeJuvaXs731yw",1,0],[1,-89.781,0,0]],[22,"Amount",33554432,1,[[[10,-17,[1,"242p8NL0hNt4QiGoFDbjpk"],[5,69.47,130]],-18,[32,-19,[1,"97YlC8PdRA75ckZnbaGOS/"]]],4,1,4],[3,"d5C23VPSBAPrdTf7PD1BeA",1,0],[1,59.924,0,0]],[22,"Icon",33554432,1,[[[10,-20,[1,"9cfS9W7bFBvJyHA5OFBxDZ"],[5,80,80]],-21],4,1],[3,"cfNbvqOuRKJaMPKRKtWmQ7",1,0],[1,146.452,0,0]],[146,"125",45,45,100,false,false,3,[1,"abu/vkq75HEK2OUOuvOZu9"]],[37,0,4,[1,"12WfeqHepBXaIR3bxLOrTD"]]],0,[0,1,1,0,0,1,0,0,1,0,57,1,0,0,1,0,0,1,0,20,5,0,17,6,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,0,2,0,0,3,0,-2,5,0,0,3,0,0,4,0,-2,6,0,3,1,21],[0,0,0,0,0,5,6],[11,5,58,-1,8,11,5],[5,2,2,7,7,5,12]],[[[11,"VFXDamage"],[120,"VFXDamage",[-3],[-2],[3,"a8dafJ58NM+bteIzQWvL9I",-1,0],[1,3.362,0.498,-2.707],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[58,"VFXDamageSpread",1,[-4],[3,"a0ubFdbg5FU7xTg+p89ixN",1,0]],[190,0.2,false,false,20,2,[1,"e4ISbCGShA4YW/CeE67G+w"],[0],[27],[14,0.25],[7],[7],[14,8],[7],[7],[7],[7],[14,0.15],[7],[7],[7],[[75,[14,10]]],[76,true,[74,1,[77,[[78,[4,33554431]]],[[79,255],[38,255,0.203125],[38,0,0.9821428571428572]]]]],[80,true,3,360,0.1,0.1,[14,1]],[193,true,[18,1,[19,[0,0.8333333333333334,1],[[28,2,1,1,1],[81,2,0.6259259259259259,-1.0730158730158719,-1.0730158730158719],[39,2,-7.090909090909088,1,-7.090909090909088,1]]]],[7],[7],[7]],[83,[18,1,[19,[0,1],[[28,2,1,1,1],[82,2,1,1]]]],[18,1,[19,[0,1],[[28,2,1,1,1],[39,2,-2.6825396825396837,1,-2.6825396825396837,1]]]],[18,1,[19,[0,1],[[21,2,1],[21,2,1]]]],[14,5]],[84,[7],[7],[7]],[85,2,[7],[7],[7],[7]],[86,[7],[7],[7]],[87,[18,1,[19,[0,1],[[21,2,1],[21,2,1]]]],[7]],[88],[89,[14,1],[7],[27],[27],-5],[90,1,2]],[191,true,0.1,false,false,2,1,[1,"52WcK1KKlKsLDGNFZu0usU"],[3],[27],[14,3],[7],[7],[7],[7],[7],[192,3,6.283185307179586],[7],[14,0.1],[7],[7],[7],[[75,[14,1]]],[76,true,[74,1,[77,[[78,[4,33554431]]],[[79,255],[38,255,0.203125],[38,0,0.9821428571428572]]]]],[80,true,3,360,0.1,0.1,[14,1]],[194,[18,1,[19,[0,0.8333333333333334,1],[[28,2,1,1,1],[81,2,0.6259259259259259,-1.0730158730158719,-1.0730158730158719],[39,2,-7.090909090909088,1,-7.090909090909088,1]]]],[7],[7],[7]],[83,[18,1,[19,[0,1],[[28,2,1,1,1],[82,2,1,1]]]],[18,1,[19,[0,1],[[28,2,1,1,1],[39,2,-2.6825396825396837,1,-2.6825396825396837,1]]]],[18,1,[19,[0,1],[[21,2,1],[21,2,1]]]],[14,5]],[84,[7],[7],[7]],[85,2,[7],[7],[7],[7]],[86,[7],[7],[7]],[87,[18,1,[19,[0,1],[[21,2,1],[21,2,1]]]],[7]],[88],[89,[14,1],[7],[27],[27],-6],[90,4,5]]],0,[0,1,1,0,-1,4,0,-1,2,0,-1,3,0,29,3,0,29,4,0,3,1,6],[0,0,0,0,0,0],[-1,30,31,-1,30,31],[18,18,15,19,19,20]],[[[69,"builtin-toon",[{"hash":2186135091,"name":"builtin-toon|legacy/main-functions/outline-vs:vert|legacy/main-functions/outline-fs:frag","blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nvarying vec2 v_uv;\n   uniform vec4 outlineParams;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform mediump vec4 cc_mainLitColor;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 v_uv;\n   uniform vec4 baseColor;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture2D(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":73,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":45}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"USE_POSITION_SCALING","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"USE_BASE_COLOR_MAP","type":"boolean"}]},{"hash":264430255,"name":"builtin-toon|toon-vs:vert|toon-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_localShadowBias;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    varying highp vec4 v_shadowPos;\n    uniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n    #if CC_SUPPORT_CASCADED_SHADOW_MAP\n      uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n    #endif\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotShadowMap;\n      float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        #if CC_SHADOWMAP_FORMAT == 1\n          return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n        #endif\n      }\n      float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        vec2 oneTap = 1.0 / shadowMapResolution;\n        vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        #if CC_SHADOWMAP_FORMAT == 1\n          block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n          block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n          block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n          block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n        #endif\n        float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        vec2 oneTap = 1.0 / shadowMapResolution;\n        float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n        float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n        float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n        float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        #if CC_SHADOWMAP_FORMAT == 1\n          block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n          block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n          block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n          block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n          block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n          block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n          block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n          block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n          block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n        #endif\n        float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n        float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n      float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        vec2 oneTap = 1.0 / shadowMapResolution;\n        vec2 twoTap = oneTap * 2.0;\n        vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n        vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n        vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n        vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n        vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n        vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n        vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n        vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n        vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n        vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n        vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n        vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n        vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n        vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n        vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n        vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n        vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n        vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n        vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n        vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n        vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n        vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n        vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n        vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n        vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n        float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n        #if CC_SHADOWMAP_FORMAT == 1\n          block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n          block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n          block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n          block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n          block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n          block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n          block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n          block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n          block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n          block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n          block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n          block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n          block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n          block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n          block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n          block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n          block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n          block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n          block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n          block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n          block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n          block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n          block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n          block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n          block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n        #endif\n        vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n        vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n        vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n        vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n        vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n        float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n        vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n        vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n        vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n        vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n        float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n        vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n        vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n        vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n        vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n        float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n        vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n        vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n        vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n        vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n        float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n        float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n        return fAvg;\n      }\n      bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n      {\n      \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n      \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n      \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n      \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n      \t\treturn false;\n      \t}\n      \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n      \treturn true;\n      }\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n      {\n        vec4 newShadowPos = shadowPos;\n        if (normalBias > EPSILON_LOWP)\n        {\n          vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n          if (viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n      {\n      \tvec4 newShadowPos = shadowPos;\n      \tif (normalBias > EPSILON_LOWP)\n      \t{\n      \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n      \t\tif (viewNormal.z < 0.1)\n      \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n      \t}\n      \treturn newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n      {\n      \tfloat coeffA = projScaleZ;\n      \tfloat coeffB = projBiasZ;\n      \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n      \tviewSpacePos_z += viewspaceDepthBias;\n      \tvec4 result = shadowPos;\n      \tresult.z = viewSpacePos_z * coeffA + coeffB;\n      \treturn result;\n      }\n      float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n        pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n        float realtimeShadow = 1.0;\n        #if CC_DIR_SHADOW_PCF_TYPE == 3\n          realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n        #endif\n        #if CC_DIR_SHADOW_PCF_TYPE == 2\n          realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n        #endif\n        #if CC_DIR_SHADOW_PCF_TYPE == 1\n          realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n        #endif\n        #if CC_DIR_SHADOW_PCF_TYPE == 0\n          realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n        #endif\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n      #if CC_SUPPORT_CASCADED_SHADOW_MAP\n        int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n          int layer = -1;\n          highp float layerThreshold = cc_csmViewDir0[0].w;\n          for (int i = 0; i < 4; i++) {\n            vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n            vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n            if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n                clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n                clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n              csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n              csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n              shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n              shadowProjInfo = cc_csmProjInfo[i];\n              shadowViewDir0 = cc_csmViewDir0[i].xyz;\n              shadowViewDir1 = cc_csmViewDir1[i].xyz;\n              shadowViewDir2 = cc_csmViewDir2[i].xyz;\n              layer = i;\n            }\n          }\n          return layer;\n        }\n        float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n        {\n          vec4 csmPos = vec4(1.0);\n          vec4 shadowProjDepthInfo, shadowProjInfo;\n          vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n          int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n          if (level < 0) { return 1.0; }\n          vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n          pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n          float realtimeShadow = 1.0;\n          #if CC_DIR_SHADOW_PCF_TYPE == 3\n            realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 2\n            realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 1\n            realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 0\n            realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n          #endif\n          return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n        }\n      #else\n        int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n          return -1;\n        }\n        float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n          vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n          return CCShadowFactorBase(shadowPos, N, shadowBias);\n        }\n      #endif\n    #endif\n        #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(v_shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\n    uniform vec4 baseColor;\n    uniform vec4 colorScaleAndCutoff;\n    uniform vec4 shadeColor1;\n    uniform vec4 shadeColor2;\n    uniform vec4 specular;\n    uniform vec4 shadeParams;\n    uniform vec4 miscParams;\n    uniform vec4 emissive;\n    uniform vec4 emissiveScaleAndStrenth;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvarying mediump vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture2D(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture2D(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture2D(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, v_uv).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * (v_tangent.w > 0.0 ? 1.0 : -1.0);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture2D(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":139,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":111}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"USE_BASE_COLOR_MAP","type":"boolean"},{"name":"USE_1ST_SHADE_MAP","type":"boolean"},{"name":"USE_2ND_SHADE_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"SHADE_MAP_1_AS_SHADE_MAP_2","type":"boolean"},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_1","type":"boolean"},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_2","type":"boolean"}]},{"hash":3000556753,"name":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.zw;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 baseColor;\n   uniform vec4 colorScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_ALPHA_TEST\n    #if USE_BASE_COLOR_MAP\n      baseColor *= texture2D(baseColorMap, v_uv);\n    #endif\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":54,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":111}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_BASE_COLOR_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"passes":[{"program":"builtin-toon|legacy/main-functions/outline-vs:vert|legacy/main-functions/outline-fs:frag","switch":"USE_OUTLINE_PASS","rasterizerState":{"cullMode":1},"depthStencilState":{"depthFunc":3,"depthTest":true,"depthWrite":true},"properties":{"lineWidth":{"type":13,"value":[10],"handleInfo":["outlineParams",0,13]},"depthBias":{"type":13,"value":[0],"handleInfo":["outlineParams",1,13]},"baseColor":{"type":16},"baseColorMap":{"value":"grey","type":28},"outlineParams":{"type":16,"value":[10,0,0,0]}}},{"program":"builtin-toon|toon-vs:vert|toon-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1]},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1]},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3]},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"shadeParams":{"type":16,"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white"}}},{"phase":"forward-add","propertyIndex":1,"program":"builtin-toon|toon-vs:vert|toon-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1]},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1]},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3]},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"shadeParams":{"type":16,"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white"}}},{"phase":"shadow-caster","propertyIndex":1,"program":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1]},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1]},"specular":{"type":16,"value":[1,1,1,0.3]},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"handleInfo":["emissiveScaleAndStrenth",3,13]},"mainTexture":{"value":"white","type":28,"handleInfo":["baseColorMap",0,28]},"baseColor":{"type":16,"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"shadeParams":{"type":16,"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white"}}}]}]]],0,0,[],[],[]],[[[15,".bin",1805576369,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5376,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5376,"count":112,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05557422339916229,-0.15423880517482758,-0.12051602452993393],"maxPosition",8,[1,0.04509193077683449,0.707298994064331,0.04950807988643646]]],-1],0,0,[],[],[]],[[[131,"default-sprite-renderer-material",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[10],[58]],[[{"name":"sprCircle","rect":{"x":0,"y":0,"width":64,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":64,"height":64},"rotated":false,"capInsets":[32,32,32,32],"vertices":{"rawPosition":[-32,-32,0,32,-32,0,-32,32,0,32,32,0],"indexes":[0,1,2,2,1,3],"uv":[0,64,64,64,0,0,64,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-32,"y":-32,"z":0},"maxPos":{"x":32,"y":32,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[12],[15]],[[[11,"ReferencesContainer"],[57,"ReferencesContainer",[[195,-2,[1,"4dbtUye81F+76YZd3uuDSb"],[196,0,1,2,3,4,5,6],[[53,10,7],[53,2,8],[53,6,9]],10,11]],[3,"a5SDSOMdJLP6Bi/zw5psmk",-1,0]]],0,[0,1,1,0,0,1,0,3,1,2],[0,0,0,0,0,0,0,0,0,0,0,0],[59,60,61,62,63,64,65,15,15,15,66,67],[59,60,61,21,22,62,63,21,22,10,64,10]],[[[15,".bin",843509983,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":35520,"length":4560,"count":1140,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":35520,"count":740,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.08518556505441666,-0.14755572378635406,-0.11435506492853165],"maxPosition",8,[1,0.08518556505441666,0.7212038636207581,0.08518549054861069]]],-1],0,0,[],[],[]],[[[11,"Crate"],[42,"Crate",[-11,-12,-13],[[[177,20,36,-8,[1,"a1uS1aeBxJoLtFSDj+0dZT"],-7,-6,-5,-4,-3,3],-9,-10],4,1,1],[44,"b3Hw2slq5MorIQvUEvY3gh",[],-2,0,[-1]],[1,1.219,0,-3.629]],[2,["a8dafJ58NM+bteIzQWvL9I"]],[29,"Visual",1,[-14,-15],[3,"a6U1I8SjBPmpMgH5n8yDFF",1,0]],[5,0,{},1,[8,"a8dafJ58NM+bteIzQWvL9I",-16,[6,"19SL0ialdL6IheGeCCYwE9",1,[[9,"VFXDamageSplash",["_name"],2],[0,["_lpos"],2,[1,0,0.5,0]],[0,["_lrot"],2,[3,0.7071067811865475,0,0,0.7071067811865476]],[0,["_euler"],2,[1,89.99999999999999,0,0]]]],2]],[59,"IB_Crate",3,[-17],[3,"2dSAFL6QNIm6ZsFekuR+Et",1,0],[1,0.5,0.5,0.5]],[33,0,5,[1,"d1svyO7FRP/5chlDVVDTFo"],[0],[16]],[59,"IB_Crate_Destroyed",3,[-18],[3,"b3ryqaoNdKeLcnN4ExSKtz",1,0],[1,0.5,0.5,0.5]],[33,0,7,[1,"9awONShmhKPo54uC/EN4a8"],[1],[16]],[24,"UIAnchor",1,[3,"ac2XF5Y1ZPV75f4kqFZLd4",1,0],[1,0,1.25,0]],[73,1,[1,"701h3qCzZEirBG4TGZ5adI"]],[46,1,[1,"24FSjyxyNJQJq9UWcqKbLW"],[4]]],0,[0,-1,4,0,1,1,0,28,8,0,24,6,0,25,11,0,18,10,0,19,9,0,0,1,0,-2,10,0,-3,11,0,-1,3,0,-2,9,0,-3,4,0,-1,5,0,-2,7,0,1,4,0,-1,6,0,-1,8,0,3,1,18],[0,0,0,0,0,6,8,10,11],[-1,-1,2,26,-1,7,7,9,8],[3,3,10,23,8,65,66,4,8]],[[[11,"UIResourceCounter"],[54,"UIResourceCounter",33554432,[-6,-7,-8],[[61,-2,[1,"f5e0VpDqtLlrCDk5oj4OkT"]],[48,-5,[1,"d2cyzYxTdC16Dau975snCk"],-4,-3]],[3,"1a9FJABDtN9I892GlHKSJE",-1,0]],[20,"Background",33554432,1,[[10,-9,[1,"d7YJwb4dxAEJbbiAFA/EBz"],[5,190,100]],[31,1,0,-10,[1,"362spYSrpDFL0DrPe2ieuS"],[4,1174405120],0]],[3,"a3uGXa+LJItaMeFlLvH/yh",1,0]],[22,"Icon",33554432,1,[[[10,-11,[1,"87z5pRsqZJNYex7wYEpIcZ"],[5,64,64]],-12],4,1],[3,"684DIw09JAnZXMRqAe6T2z",1,0],[1,47.273,0,0]],[22,"Label",33554432,1,[[[10,-13,[1,"12NUpuHpNA+bYbbfOG4o8K"],[5,76.45,50.4]],-14],4,1],[3,"ccBpVuXhFK8pitpX9BJAOS",1,0],[1,-36.352,0,0]],[37,0,3,[1,"0acM/iDyBHoYEOekfqOI+Y"]],[65,"124",50,50,2,false,4,[1,"24hJ9LuqJDO7OMJK2Mgj18"]]],0,[0,1,1,0,0,1,0,20,6,0,17,5,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,0,3,0,-2,5,0,0,4,0,-2,6,0,3,1,14],[0,5,6],[5,5,11],[2,12,5]],[[[11,"Gates"],[42,"Gates",[-10,-11,-12],[[[178,20,200,3,-7,[1,"a1uS1aeBxJoLtFSDj+0dZT"],-6,-5,-4,-3,2],-8,-9],4,1,1],[44,"b3Hw2slq5MorIQvUEvY3gh",[],-2,0,[-1]],[1,1.219,0,-3.629]],[2,["a8dafJ58NM+bteIzQWvL9I"]],[5,0,{},1,[8,"a8dafJ58NM+bteIzQWvL9I",-13,[6,"19SL0ialdL6IheGeCCYwE9",1,[[9,"VFXDamageSplash",["_name"],2],[0,["_lpos"],2,[1,0,1.238,0]],[0,["_lrot"],2,[3,0.7071067811865475,0,0,0.7071067811865476]],[0,["_euler"],2,[1,89.99999999999999,0,0]]]],1]],[29,"Visual",1,[-14],[3,"a6U1I8SjBPmpMgH5n8yDFF",1,0]],[121,"IB_Gates",4,[-15],[3,"18kPmjF61ANb8jVdN9bog6",1,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[33,0,5,[1,"3d1kNqXu5MfLoXsDt9c3v2"],[0],[16]],[24,"UIAnchor",1,[3,"ac2XF5Y1ZPV75f4kqFZLd4",1,0],[1,0,1.528,0]],[197,3,0,1,[1,"38IM0HufJPuoO5DwjThZJO"]],[46,1,[1,"24FSjyxyNJQJq9UWcqKbLW"],[3]]],0,[0,-1,3,0,1,1,0,24,6,0,25,9,0,18,8,0,19,7,0,0,1,0,-2,9,0,-3,8,0,-1,4,0,-2,7,0,-3,3,0,1,3,0,-1,5,0,-1,6,0,3,1,15],[0,0,0,0,6,8,9],[-1,2,26,-1,7,9,8],[3,10,23,8,67,4,8]],[[{"name":"sprHand","rect":{"x":0,"y":0,"width":64,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":64,"height":64},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-32,-32,0,32,-32,0,-32,32,0,32,32,0],"indexes":[0,1,2,2,1,3],"uv":[0,64,64,64,0,0,64,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-32,"y":-32,"z":0},"maxPos":{"x":32,"y":32,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[12],[68]],[[[11,"DataContainer"],[57,"DataContainer",[[199,"https://play.google.com/store/apps/details?id=com.idle.breaker.game&hl=en",5,-2,[1,"f2lDguBGFJtp2QdZTLEMTx"],[200,400,400],[201,[[91,20,0],[91,30,1]]],[202,[2]],[203,[[92,20,70],[92,30,150]]],[204,[[205,12,3],[93,18,2,4],[93,50,3,5]]]]],[3,"9bmGaZb3FGf7hQCUKID6Vd",-1,0]]],0,[0,1,1,0,0,1,0,3,1,2],[0,0,0,0,0,0],[17,17,-1,15,15,15],[12,69,70,71,72,73]],[[[15,".bin",376039175,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17568,"length":2448,"count":612,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17568,"count":366,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1,-1.5477465353797015e-7,-1.0000001192092896],"maxPosition",8,[1,1,0.8197481632232666,1]]],-1],0,0,[],[],[]],[[{"name":"iconResourceMetal","rect":{"x":0,"y":0,"width":128,"height":128},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-64,-64,0,64,-64,0,-64,64,0,64,64,0],"indexes":[0,1,2,2,1,3],"uv":[0,128,128,128,0,0,128,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-64,"y":-64,"z":0},"maxPos":{"x":64,"y":64,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[12],[74]],[[[15,".bin",3850307249,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11520,"length":1440,"count":360,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11520,"count":240,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.7890530824661255,-0.023711171001195908,-0.2782174050807953],"maxPosition",8,[1,1.8944401741027832,3.259107828140259,0.11024467647075653]]],-1],0,0,[],[],[]],[[[11,"UIJoystick"],[106,"UIJoystick",512,33554432,[-8,-9],[[10,-2,[1,"afiuxKIh9Ob78r2Fyf7Gbl"],[5,1080,1920]],[37,0,-3,[1,"01LHA3OW1N74Bx4Ztq23OE"]],[206,70,-6,[1,"52sCTIpHdEnItzvkUv33rW"],-5,-4],[45,45,1080,1920,-7,[1,"29CFe3viROULSCQoXPmQCh"]]],[3,"baBsOrVJBE8rqyw8gXLANA",-1,0]],[20,"Base",33554432,1,[[10,-10,[1,"c0SP9zsPlFgbgDNJI/WZFJ"],[5,250,250]],[141,0,-11,[1,"d1ZjzZB19Ga7DBWSrUfMER"],[4,1694498815],0]],[3,"59aO3x2GxG7IN7GpiG/5YC",1,0]],[20,"Stick",33554432,1,[[61,-12,[1,"f829uaLhJNA58xsVTN97It"]],[47,0,-13,[1,"3cJZpqCJZBD7KOzXBWSszy"],1]],[3,"8aI0RMSHNJ7acTiyqdcco/",1,0]]],0,[0,1,1,0,0,1,0,0,1,0,68,3,0,69,2,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,3,0,0,3,0,3,1,13],[0,0],[5,5],[2,2]],[[[15,".bin",3352378639,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":1080,"count":270,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0743197575211525,-0.15425726771354675,-0.16296318173408508],"maxPosition",8,[1,0.07431953400373459,0.6911253929138184,0.16296298801898956]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@e9a6d","back":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@40c10","left":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@8fd34","right":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@74afd","top":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@bb97f","bottom":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@7d38f"}]}],[15],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"name":"sprArrow","rect":{"x":18,"y":3,"width":92,"height":121},"offset":{"x":0,"y":0.5},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-46,-60.5,0,46,-60.5,0,-46,60.5,0,46,60.5,0],"indexes":[0,1,2,2,1,3],"uv":[18,125,110,125,18,4,110,4],"nuv":[0.140625,0.03125,0.859375,0.03125,0.140625,0.9765625,0.859375,0.9765625],"minPos":{"x":-46,"y":-60.5,"z":0},"maxPos":{"x":46,"y":60.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[12],[75]],[[[30,"matParticlesSplash",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,10],[20,24]],[[[11,"Weapon_1"],[36,"Weapon_1",[[66,1,-2,[1,"e3NMKkGANIQIzhrHy9xMSQ"],[0],[16],1]],[3,"01ERHEp0FJwJYOIbDbsRQr",-1,0],[1,-1.5921945571899414,0.5963954329490662,0]]],0,[0,1,1,0,0,1,0,3,1,2],[0,0],[-1,7],[3,76]],[[[11,"Tree"],[36,"Tree",[[67,0,-2,[1,"2bCuBgCTxP5JQATS103/nu"],[0],[16],1]],[3,"52TLzwtftFra5m/XwSaA+s",-1,0],[1,-1.883,0,3.185]]],0,[0,1,1,0,0,1,0,3,1,2],[0,0],[-1,7],[3,77]],[[[11,"Fence"],[107,"Fence",[[67,0,-2,[1,"5f5CxNX/RL/4fsgeSMM6Y3"],[0],[16],1],[198,0.2,3,0,-3,[1,"23UE5iY85DYZ8BGIzgaweO"],2]],[3,"07I5sRgfNKGZPaRDVbkh6q",-1,0],[1,0.5,0.5,0.5]]],0,[0,1,1,0,0,1,0,0,1,0,3,1,3],[0,0,0],[-1,7,9],[3,78,4]],[[[30,"matParticlesSpread",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,10],[15,24]],[[[11,"UIHealthBar"],[23,"UIHealthBar",33554432,[-6,-7],[[10,-2,[1,"4cVRxrUchOM6wKrAfvTChu"],[5,200,60]],[142,1,0,-3,[1,"a0okCNOGpB2KMxKhpJzTTz"],1],[207,190,0.6,-5,[1,"dcSHcpiRVDfr9fdJB6IwQ6"],-4]],[3,"c1aEsc751GjYCFhEMab0+v",-1,0],[1,-100,100,0]],[41,"BarBackground",33554432,1,[[62,-8,[1,"80+glI0BdD9YcBnDdKprw9"],[5,194,55],[0,0,0.5]],[31,1,0,-9,[1,"dajKuCdnNAfLopRDX7eIW8"],[4,4282400833],0]],[3,"38aPRFJC1A4YewzIPmWeq5",1,0],[1,-97,0,0]],[22,"Bar",33554432,1,[[[62,-10,[1,"c06OKVo9NLz461XaJcMeyy"],[5,114,50],[0,0,0.5]],-11],4,1],[3,"7dpVPjBEVEFoajEVLa3wgy",1,0],[1,-95,0,0]],[143,1,0,3,[1,"35Y79f9+BA/7qJ12Eow6Gh"],[4,4293176925]]],0,[0,1,1,0,0,1,0,0,1,0,70,4,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,3,0,-2,4,0,3,1,11],[0,0,4],[5,5,5],[2,2,2]],[[[15,".bin",845192149,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12672,"length":1680,"count":420,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12672,"count":264,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1,-1.5477465353797015e-7,-1.0000003576278687],"maxPosition",8,[1,1,2.000000238418579,1]]],-1],0,0,[],[],[]],[[[208,"LilitaOne-Regular","LilitaOne-Regular.ttf"],-1],0,0,[],[],[]]]]
